{
    "sourceFile": "script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1755247233087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755247964026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,678 +1,678 @@\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // Initialize theme\r\n-    initTheme();\r\n-    \r\n-    // Mobile Navigation\r\n-    const hamburger = document.querySelector('.hamburger');\r\n-    const navLinks = document.querySelector('.nav-links');\r\n-    \r\n-    if (hamburger) {\r\n-        hamburger.addEventListener('click', function() {\r\n-            this.classList.toggle('active');\r\n-            navLinks.classList.toggle('active');\r\n-        });\r\n-    }\r\n-    \r\n-    // Close mobile nav when clicking on a link\r\n-    const navItems = document.querySelectorAll('.nav-links a');\r\n-    navItems.forEach(item => {\r\n-        item.addEventListener('click', function() {\r\n-            if (hamburger && hamburger.classList.contains('active')) {\r\n-                hamburger.classList.remove('active');\r\n-                navLinks.classList.remove('active');\r\n-            }\r\n-        });\r\n-    });\r\n-    \r\n-    // Smooth scrolling for anchor links\r\n-    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n-        anchor.addEventListener('click', function(e) {\r\n-            e.preventDefault();\r\n-            const target = document.querySelector(this.getAttribute('href'));\r\n-            \r\n-            if (target) {\r\n-                const headerHeight = document.querySelector('header').offsetHeight;\r\n-                window.scrollTo({\r\n-                    top: target.offsetTop - headerHeight - 20,\r\n-                    behavior: 'smooth'\r\n-                });\r\n-            }\r\n-        });\r\n-    });\r\n-    \r\n-    // Project filtering\r\n-    const filterButtons = document.querySelectorAll('.filter-btn');\r\n-    const projectCards = document.querySelectorAll('.project-card');\r\n-    \r\n-    if (filterButtons.length > 0) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', function() {\r\n-                // Remove active class from all buttons\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                \r\n-                // Add active class to clicked button\r\n-                this.classList.add('active');\r\n-                \r\n-                const filter = this.getAttribute('data-filter');\r\n-                \r\n-                // Animate project cards\r\n-                projectCards.forEach((card, index) => {\r\n-                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\r\n-                        card.style.display = 'block';\r\n-                        setTimeout(() => {\r\n-                            card.style.opacity = '1';\r\n-                            card.style.transform = 'translateY(0)';\r\n-                        }, index * 100);\r\n-                    } else {\r\n-                        card.style.opacity = '0';\r\n-                        card.style.transform = 'translateY(20px)';\r\n-                        setTimeout(() => {\r\n-                            card.style.display = 'none';\r\n-                        }, 300);\r\n-                    }\r\n-                });\r\n-            });\r\n-        });\r\n-    }\r\n-    \r\n-    // Animated Text Rotation\r\n-    function TxtRotate(el, toRotate, period) {\r\n-        this.toRotate = toRotate;\r\n-        this.el = el;\r\n-        this.loopNum = 0;\r\n-        this.period = parseInt(period, 10) || 2000;\r\n-        this.txt = '';\r\n-        this.tick();\r\n-        this.isDeleting = false;\r\n-    }\r\n-    \r\n-    TxtRotate.prototype.tick = function() {\r\n-        const i = this.loopNum % this.toRotate.length;\r\n-        const fullTxt = this.toRotate[i];\r\n-        \r\n-        if (this.isDeleting) {\r\n-            this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n-        } else {\r\n-            this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n-        }\r\n-        \r\n-        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\r\n-        \r\n-        const that = this;\r\n-        let delta = 200 - Math.random() * 100;\r\n-        \r\n-        if (this.isDeleting) { delta /= 2; }\r\n-        \r\n-        if (!this.isDeleting && this.txt === fullTxt) {\r\n-            delta = this.period;\r\n-            this.isDeleting = true;\r\n-        } else if (this.isDeleting && this.txt === '') {\r\n-            this.isDeleting = false;\r\n-            this.loopNum++;\r\n-            delta = 500;\r\n-        }\r\n-        \r\n-        setTimeout(function() {\r\n-            that.tick();\r\n-        }, delta);\r\n-    };\r\n-    \r\n-    // Start text rotation\r\n-    const elements = document.getElementsByClassName('txt-rotate');\r\n-    for (let i = 0; i < elements.length; i++) {\r\n-        const toRotate = elements[i].getAttribute('data-rotate');\r\n-        const period = elements[i].getAttribute('data-period');\r\n-        if (toRotate) {\r\n-            new TxtRotate(elements[i], JSON.parse(toRotate), period);\r\n-        }\r\n-    }\r\n-    \r\n-    // Theme toggle functionality\r\n-    function initTheme() {\r\n-        const themeToggle = document.getElementById('checkbox');\r\n-        const currentTheme = localStorage.getItem('theme') || 'light';\r\n-        \r\n-        // Set initial theme\r\n-        document.documentElement.setAttribute('data-theme', currentTheme);\r\n-        themeToggle.checked = currentTheme === 'dark';\r\n-        \r\n-        // Theme toggle event\r\n-        themeToggle.addEventListener('change', function() {\r\n-            const newTheme = this.checked ? 'dark' : 'light';\r\n-            document.documentElement.setAttribute('data-theme', newTheme);\r\n-            localStorage.setItem('theme', newTheme);\r\n-            \r\n-            // Add transition effect\r\n-            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\r\n-        });\r\n-    }\r\n-    \r\n-    // Navbar scroll effect\r\n-    const header = document.querySelector('header');\r\n-    \r\n-    if (header) {\r\n-        window.addEventListener('scroll', function() {\r\n-            if (window.scrollY > 100) {\r\n-                header.classList.add('scrolled');\r\n-            } else {\r\n-                header.classList.remove('scrolled');\r\n-            }\r\n-        });\r\n-    }\r\n-    \r\n-    // Intersection Observer for animations\r\n-    const observerOptions = {\r\n-        threshold: 0.1,\r\n-        rootMargin: '0px 0px -50px 0px'\r\n-    };\r\n-    \r\n-    // Animate elements on scroll\r\n-    const animateOnScroll = new IntersectionObserver(function(entries, observer) {\r\n-        entries.forEach(entry => {\r\n-            if (entry.isIntersecting) {\r\n-                entry.target.classList.add('animate-in');\r\n-                observer.unobserve(entry.target);\r\n-            }\r\n-        });\r\n-    }, observerOptions);\r\n-    \r\n-    // Observe elements for animation\r\n-    const animatedElements = document.querySelectorAll('.project-card, .skill-category, .timeline-item');\r\n-    animatedElements.forEach(el => {\r\n-        el.style.opacity = '0';\r\n-        el.style.transform = 'translateY(30px)';\r\n-        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\r\n-        animateOnScroll.observe(el);\r\n-    });\r\n-    \r\n-    // Add animation class\r\n-    document.addEventListener('scroll', function() {\r\n-        animatedElements.forEach(el => {\r\n-            if (el.classList.contains('animate-in')) {\r\n-                el.style.opacity = '1';\r\n-                el.style.transform = 'translateY(0)';\r\n-            }\r\n-        });\r\n-    });\r\n-    \r\n-    // Animate skill bars on scroll\r\n-    const skillSection = document.querySelector('.skills-progress');\r\n-    \r\n-    if (skillSection) {\r\n-        const skillObserver = new IntersectionObserver((entries) => {\r\n-            entries.forEach(entry => {\r\n-                if (entry.isIntersecting) {\r\n-                    const skillBars = document.querySelectorAll('.skill-level');\r\n-                    skillBars.forEach((bar, index) => {\r\n-                        setTimeout(() => {\r\n-                            const width = bar.getAttribute('data-level');\r\n-                            bar.style.width = width;\r\n-                        }, index * 200);\r\n-                    });\r\n-                    skillObserver.unobserve(entry.target);\r\n-                }\r\n-            });\r\n-        }, { threshold: 0.5 });\r\n-        \r\n-        skillObserver.observe(skillSection);\r\n-    }\r\n-    \r\n-    // Portfolio image popup functionality\r\n-    const projectImages = document.querySelectorAll('.project-img img');\r\n-    \r\n-    projectImages.forEach(img => {\r\n-        img.addEventListener('click', function() {\r\n-            createImagePopup(this.src, this.alt);\r\n-        });\r\n-    });\r\n-    \r\n-    function createImagePopup(src, alt) {\r\n-        const overlay = document.createElement('div');\r\n-        overlay.className = 'image-popup-overlay';\r\n-        overlay.style.cssText = `\r\n-            position: fixed;\r\n-            top: 0;\r\n-            left: 0;\r\n-            width: 100%;\r\n-            height: 100%;\r\n-            background: rgba(0, 0, 0, 0.9);\r\n-            display: flex;\r\n-            align-items: center;\r\n-            justify-content: center;\r\n-            z-index: 10000;\r\n-            opacity: 0;\r\n-            transition: opacity 0.3s ease;\r\n-        `;\r\n-        \r\n-        const popupContent = document.createElement('div');\r\n-        popupContent.style.cssText = `\r\n-            position: relative;\r\n-            max-width: 90%;\r\n-            max-height: 90%;\r\n-            transform: scale(0.8);\r\n-            transition: transform 0.3s ease;\r\n-        `;\r\n-        \r\n-        const popupImg = document.createElement('img');\r\n-        popupImg.src = src;\r\n-        popupImg.alt = alt;\r\n-        popupImg.style.cssText = `\r\n-            width: 100%;\r\n-            height: auto;\r\n-            border-radius: 8px;\r\n-            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\r\n-        `;\r\n-        \r\n-        const closeBtn = document.createElement('div');\r\n-        closeBtn.innerHTML = '&times;';\r\n-        closeBtn.style.cssText = `\r\n-            position: absolute;\r\n-            top: -40px;\r\n-            right: 0;\r\n-            width: 30px;\r\n-            height: 30px;\r\n-            background: rgba(255, 255, 255, 0.2);\r\n-            color: white;\r\n-            border-radius: 50%;\r\n-            display: flex;\r\n-            align-items: center;\r\n-            justify-content: center;\r\n-            cursor: pointer;\r\n-            font-size: 20px;\r\n-            transition: background 0.3s ease;\r\n-        `;\r\n-        \r\n-        closeBtn.addEventListener('mouseenter', function() {\r\n-            this.style.background = 'rgba(255, 255, 255, 0.3)';\r\n-        });\r\n-        \r\n-        closeBtn.addEventListener('mouseleave', function() {\r\n-            this.style.background = 'rgba(255, 255, 255, 0.2)';\r\n-        });\r\n-        \r\n-        popupContent.appendChild(popupImg);\r\n-        popupContent.appendChild(closeBtn);\r\n-        overlay.appendChild(popupContent);\r\n-        document.body.appendChild(overlay);\r\n-        \r\n-        // Prevent scrolling when popup is open\r\n-        document.body.style.overflow = 'hidden';\r\n-        \r\n-        // Animate in\r\n-        setTimeout(() => {\r\n-            overlay.style.opacity = '1';\r\n-            popupContent.style.transform = 'scale(1)';\r\n-        }, 10);\r\n-        \r\n-        // Close popup when clicking close button or overlay\r\n-        closeBtn.addEventListener('click', closePopup);\r\n-        overlay.addEventListener('click', function(e) {\r\n-            if (e.target === overlay) {\r\n-                closePopup();\r\n-            }\r\n-        });\r\n-        \r\n-        // Close on escape key\r\n-        document.addEventListener('keydown', function(e) {\r\n-            if (e.key === 'Escape') {\r\n-                closePopup();\r\n-            }\r\n-        });\r\n-        \r\n-        function closePopup() {\r\n-            overlay.style.opacity = '0';\r\n-            popupContent.style.transform = 'scale(0.8)';\r\n-            setTimeout(() => {\r\n-                document.body.removeChild(overlay);\r\n-                document.body.style.overflow = '';\r\n-            }, 300);\r\n-        }\r\n-    }\r\n-    \r\n-    // Form submission with validation\r\n-    const contactForm = document.getElementById('contactForm');\r\n-    \r\n-    if (contactForm) {\r\n-        contactForm.addEventListener('submit', function(e) {\r\n-            e.preventDefault();\r\n-            \r\n-            // Basic validation\r\n-            let isValid = true;\r\n-            const formElements = this.elements;\r\n-            \r\n-            for (let i = 0; i < formElements.length; i++) {\r\n-                if (formElements[i].hasAttribute('required') && formElements[i].value.trim() === '') {\r\n-                    isValid = false;\r\n-                    formElements[i].classList.add('error');\r\n-                } else {\r\n-                    formElements[i].classList.remove('error');\r\n-                }\r\n-            }\r\n-            \r\n-            if (isValid) {\r\n-                // Show loading state\r\n-                const submitBtn = this.querySelector('button[type=\"submit\"]');\r\n-                const originalText = submitBtn.innerHTML;\r\n-                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\r\n-                submitBtn.disabled = true;\r\n-                \r\n-                // Simulate form submission (replace with actual form handling)\r\n-                setTimeout(() => {\r\n-                    // Show success message\r\n-                    showNotification('Message sent successfully!', 'success');\r\n-                    \r\n-                    // Reset form\r\n-                    this.reset();\r\n-                    \r\n-                    // Reset button\r\n-                    submitBtn.innerHTML = originalText;\r\n-                    submitBtn.disabled = false;\r\n-                }, 2000);\r\n-            } else {\r\n-                showNotification('Please fill in all required fields.', 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-    \r\n-    // Notification system\r\n-    function showNotification(message, type = 'info') {\r\n-        const notification = document.createElement('div');\r\n-        notification.className = `notification notification-${type}`;\r\n-        notification.style.cssText = `\r\n-            position: fixed;\r\n-            top: 20px;\r\n-            right: 20px;\r\n-            padding: 15px 20px;\r\n-            border-radius: 8px;\r\n-            color: white;\r\n-            font-weight: 500;\r\n-            z-index: 10001;\r\n-            transform: translateX(100%);\r\n-            transition: transform 0.3s ease;\r\n-            max-width: 300px;\r\n-        `;\r\n-        \r\n-        // Set colors based on type\r\n-        switch(type) {\r\n-            case 'success':\r\n-                notification.style.background = '#10b981';\r\n-                break;\r\n-            case 'error':\r\n-                notification.style.background = '#ef4444';\r\n-                break;\r\n-            default:\r\n-                notification.style.background = '#3b82f6';\r\n-        }\r\n-        \r\n-        notification.textContent = message;\r\n-        document.body.appendChild(notification);\r\n-        \r\n-        // Animate in\r\n-        setTimeout(() => {\r\n-            notification.style.transform = 'translateX(0)';\r\n-        }, 10);\r\n-        \r\n-        // Auto remove after 5 seconds\r\n-        setTimeout(() => {\r\n-            notification.style.transform = 'translateX(100%)';\r\n-            setTimeout(() => {\r\n-                if (document.body.contains(notification)) {\r\n-                    document.body.removeChild(notification);\r\n-                }\r\n-            }, 300);\r\n-        }, 5000);\r\n-    }\r\n-    \r\n-    // Smooth reveal animation for sections\r\n-    const sections = document.querySelectorAll('section');\r\n-    const sectionObserver = new IntersectionObserver((entries) => {\r\n-        entries.forEach(entry => {\r\n-            if (entry.isIntersecting) {\r\n-                entry.target.classList.add('section-visible');\r\n-            }\r\n-        });\r\n-    }, { threshold: 0.1 });\r\n-    \r\n-    sections.forEach(section => {\r\n-        section.style.opacity = '0';\r\n-        section.style.transform = 'translateY(30px)';\r\n-        section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\r\n-        sectionObserver.observe(section);\r\n-    });\r\n-    \r\n-    // Add section visibility class\r\n-    document.addEventListener('scroll', function() {\r\n-        sections.forEach(section => {\r\n-            if (section.classList.contains('section-visible')) {\r\n-                section.style.opacity = '1';\r\n-                section.style.transform = 'translateY(0)';\r\n-            }\r\n-        });\r\n-    });\r\n-    \r\n-    // Parallax effect for hero section\r\n-    const hero = document.querySelector('.hero');\r\n-    if (hero) {\r\n-        window.addEventListener('scroll', function() {\r\n-            const scrolled = window.pageYOffset;\r\n-            const rate = scrolled * -0.5;\r\n-            hero.style.transform = `translateY(${rate}px)`;\r\n-        });\r\n-    }\r\n-    \r\n-    // Add floating animation to hero image\r\n-    const heroImage = document.querySelector('.image-container');\r\n-    if (heroImage) {\r\n-        heroImage.style.animation = 'float 6s ease-in-out infinite';\r\n-    }\r\n-    \r\n-    // Add CSS for float animation if not exists\r\n-    if (!document.querySelector('#float-animation')) {\r\n-        const style = document.createElement('style');\r\n-        style.id = 'float-animation';\r\n-        style.textContent = `\r\n-            @keyframes float {\r\n-                0%, 100% { transform: translateY(0px); }\r\n-                50% { transform: translateY(-20px); }\r\n-            }\r\n-        `;\r\n-        document.head.appendChild(style);\r\n-    }\r\n-    \r\n-    // Initialize particles effect (if particles.js is loaded)\r\n-    if (typeof particlesJS !== 'undefined' && document.getElementById('particles-js')) {\r\n-        particlesJS('particles-js', {\r\n-            particles: {\r\n-                number: { value: 80, density: { enable: true, value_area: 800 } },\r\n-                color: { value: \"#6366f1\" },\r\n-                shape: { type: \"circle\" },\r\n-                opacity: { value: 0.5, random: false },\r\n-                size: { value: 3, random: true },\r\n-                line_linked: {\r\n-                    enable: true,\r\n-                    distance: 150,\r\n-                    color: \"#6366f1\",\r\n-                    opacity: 0.4,\r\n-                    width: 1\r\n-                },\r\n-                move: {\r\n-                    enable: true,\r\n-                    speed: 6,\r\n-                    direction: \"none\",\r\n-                    random: false,\r\n-                    straight: false,\r\n-                    out_mode: \"out\",\r\n-                    bounce: false\r\n-                }\r\n-            },\r\n-            interactivity: {\r\n-                detect_on: \"canvas\",\r\n-                events: {\r\n-                    onhover: { enable: true, mode: \"repulse\" },\r\n-                    onclick: { enable: true, mode: \"push\" },\r\n-                    resize: true\r\n-                }\r\n-            },\r\n-            retina_detect: true\r\n-        });\r\n-    }\r\n-    \r\n-    // Add scroll progress indicator\r\n-    const progressBar = document.createElement('div');\r\n-    progressBar.style.cssText = `\r\n-        position: fixed;\r\n-        top: 0;\r\n-        left: 0;\r\n-        width: 0%;\r\n-        height: 3px;\r\n-        background: linear-gradient(90deg, #6366f1, #06b6d4);\r\n-        z-index: 10000;\r\n-        transition: width 0.1s ease;\r\n-    `;\r\n-    document.body.appendChild(progressBar);\r\n-    \r\n-    window.addEventListener('scroll', function() {\r\n-        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\r\n-        progressBar.style.width = scrolled + '%';\r\n-    });\r\n-    \r\n-    // Add hover effects to project cards\r\n-    projectCards.forEach(card => {\r\n-        card.addEventListener('mouseenter', function() {\r\n-            this.style.transform = 'translateY(-10px) scale(1.02)';\r\n-        });\r\n-        \r\n-        card.addEventListener('mouseleave', function() {\r\n-            this.style.transform = 'translateY(0) scale(1)';\r\n-        });\r\n-    });\r\n-    \r\n-    // Add typing effect to hero text\r\n-    function typeWriter(element, text, speed = 100) {\r\n-        let i = 0;\r\n-        element.innerHTML = '';\r\n-        \r\n-        function type() {\r\n-            if (i < text.length) {\r\n-                element.innerHTML += text.charAt(i);\r\n-                i++;\r\n-                setTimeout(type, speed);\r\n-            }\r\n-        }\r\n-        \r\n-        type();\r\n-    }\r\n-    \r\n-    // Initialize typing effect for hero title\r\n-    const heroTitle = document.querySelector('.title .txt-rotate');\r\n-    if (heroTitle && heroTitle.textContent) {\r\n-        const originalText = heroTitle.textContent;\r\n-        setTimeout(() => {\r\n-            typeWriter(heroTitle, originalText, 50);\r\n-        }, 1000);\r\n-    }\r\n-    \r\n-    // Add scroll-triggered animations\r\n-    const animatedElements = document.querySelectorAll('.animate-on-scroll');\r\n-    const scrollObserver = new IntersectionObserver((entries) => {\r\n-        entries.forEach(entry => {\r\n-            if (entry.isIntersecting) {\r\n-                entry.target.classList.add('animated');\r\n-            }\r\n-        });\r\n-    }, { threshold: 0.1 });\r\n-    \r\n-    animatedElements.forEach(el => {\r\n-        scrollObserver.observe(el);\r\n-    });\r\n-    \r\n-    // Performance optimization: Throttle scroll events\r\n-    let ticking = false;\r\n-    \r\n-    function updateOnScroll() {\r\n-        // Update scroll-based animations here\r\n-        ticking = false;\r\n-    }\r\n-    \r\n-    function requestTick() {\r\n-        if (!ticking) {\r\n-            requestAnimationFrame(updateOnScroll);\r\n-            ticking = true;\r\n-        }\r\n-    }\r\n-    \r\n-    window.addEventListener('scroll', requestTick);\r\n-    \r\n-    // Add keyboard navigation support\r\n-    document.addEventListener('keydown', function(e) {\r\n-        // Escape key closes any open modals/popups\r\n-        if (e.key === 'Escape') {\r\n-            const popup = document.querySelector('.image-popup-overlay');\r\n-            if (popup) {\r\n-                popup.click();\r\n-            }\r\n-        }\r\n-        \r\n-        // Tab key navigation enhancement\r\n-        if (e.key === 'Tab') {\r\n-            document.body.classList.add('keyboard-navigation');\r\n-        }\r\n-    });\r\n-    \r\n-    // Remove keyboard navigation class on mouse use\r\n-    document.addEventListener('mousedown', function() {\r\n-        document.body.classList.remove('keyboard-navigation');\r\n-    });\r\n-    \r\n-    // Add focus styles for keyboard navigation\r\n-    document.addEventListener('keydown', function(e) {\r\n-        if (e.key === 'Tab') {\r\n-            document.body.classList.add('keyboard-navigation');\r\n-        }\r\n-    });\r\n-    \r\n-    // Initialize tooltips for project actions\r\n-    const projectActions = document.querySelectorAll('.project-link, .project-code');\r\n-    projectActions.forEach(action => {\r\n-        const tooltip = document.createElement('div');\r\n-        tooltip.className = 'tooltip';\r\n-        tooltip.textContent = action.title || 'View Project';\r\n-        tooltip.style.cssText = `\r\n-            position: absolute;\r\n-            background: rgba(0, 0, 0, 0.8);\r\n-            color: white;\r\n-            padding: 5px 10px;\r\n-            border-radius: 4px;\r\n-            font-size: 12px;\r\n-            white-space: nowrap;\r\n-            opacity: 0;\r\n-            pointer-events: none;\r\n-            transition: opacity 0.3s ease;\r\n-            z-index: 1000;\r\n-        `;\r\n-        \r\n-        action.appendChild(tooltip);\r\n-        \r\n-        action.addEventListener('mouseenter', function() {\r\n-            tooltip.style.opacity = '1';\r\n-        });\r\n-        \r\n-        action.addEventListener('mouseleave', function() {\r\n-            tooltip.style.opacity = '0';\r\n-        });\r\n-    });\r\n-    \r\n-    // Add loading animation for images\r\n-    const images = document.querySelectorAll('img');\r\n-    images.forEach(img => {\r\n-        img.addEventListener('load', function() {\r\n-            this.style.opacity = '1';\r\n-        });\r\n-        \r\n-        img.style.opacity = '0';\r\n-        img.style.transition = 'opacity 0.3s ease';\r\n-    });\r\n-    \r\n-    // Initialize the page\r\n-    console.log('Portfolio initialized successfully! 🚀');\r\n+document.addEventListener('DOMContentLoaded', function() {\n+    // Initialize theme\n+    initTheme();\n+    \n+    // Mobile Navigation\n+    const hamburger = document.querySelector('.hamburger');\n+    const navLinks = document.querySelector('.nav-links');\n+    \n+    if (hamburger) {\n+        hamburger.addEventListener('click', function() {\n+            this.classList.toggle('active');\n+            navLinks.classList.toggle('active');\n+        });\n+    }\n+    \n+    // Close mobile nav when clicking on a link\n+    const navItems = document.querySelectorAll('.nav-links a');\n+    navItems.forEach(item => {\n+        item.addEventListener('click', function() {\n+            if (hamburger && hamburger.classList.contains('active')) {\n+                hamburger.classList.remove('active');\n+                navLinks.classList.remove('active');\n+            }\n+        });\n+    });\n+    \n+    // Smooth scrolling for anchor links\n+    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n+        anchor.addEventListener('click', function(e) {\n+            e.preventDefault();\n+            const target = document.querySelector(this.getAttribute('href'));\n+            \n+            if (target) {\n+                const headerHeight = document.querySelector('header').offsetHeight;\n+                window.scrollTo({\n+                    top: target.offsetTop - headerHeight - 20,\n+                    behavior: 'smooth'\n+                });\n+            }\n+        });\n+    });\n+    \n+    // Project filtering\n+    const filterButtons = document.querySelectorAll('.filter-btn');\n+    const projectCards = document.querySelectorAll('.project-card');\n+    \n+    if (filterButtons.length > 0) {\n+        filterButtons.forEach(button => {\n+            button.addEventListener('click', function() {\n+                // Remove active class from all buttons\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\n+                \n+                // Add active class to clicked button\n+                this.classList.add('active');\n+                \n+                const filter = this.getAttribute('data-filter');\n+                \n+                // Animate project cards\n+                projectCards.forEach((card, index) => {\n+                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\n+                        card.style.display = 'block';\n+                        setTimeout(() => {\n+                            card.style.opacity = '1';\n+                            card.style.transform = 'translateY(0)';\n+                        }, index * 100);\n+                    } else {\n+                        card.style.opacity = '0';\n+                        card.style.transform = 'translateY(20px)';\n+                        setTimeout(() => {\n+                        card.style.display = 'none';\n+                        }, 300);\n+                    }\n+                });\n+            });\n+        });\n+    }\n+    \n+    // Animated Text Rotation\n+    function TxtRotate(el, toRotate, period) {\n+        this.toRotate = toRotate;\n+        this.el = el;\n+        this.loopNum = 0;\n+        this.period = parseInt(period, 10) || 2000;\n+        this.txt = '';\n+        this.tick();\n+        this.isDeleting = false;\n+    }\n+    \n+    TxtRotate.prototype.tick = function() {\n+        const i = this.loopNum % this.toRotate.length;\n+        const fullTxt = this.toRotate[i];\n+        \n+        if (this.isDeleting) {\n+            this.txt = fullTxt.substring(0, this.txt.length - 1);\n+        } else {\n+            this.txt = fullTxt.substring(0, this.txt.length + 1);\n+        }\n+        \n+        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\n+        \n+        const that = this;\n+        let delta = 200 - Math.random() * 100;\n+        \n+        if (this.isDeleting) { delta /= 2; }\n+        \n+        if (!this.isDeleting && this.txt === fullTxt) {\n+            delta = this.period;\n+            this.isDeleting = true;\n+        } else if (this.isDeleting && this.txt === '') {\n+            this.isDeleting = false;\n+            this.loopNum++;\n+            delta = 500;\n+        }\n+        \n+        setTimeout(function() {\n+            that.tick();\n+        }, delta);\n+    };\n+    \n+    // Start text rotation\n+    const elements = document.getElementsByClassName('txt-rotate');\n+    for (let i = 0; i < elements.length; i++) {\n+        const toRotate = elements[i].getAttribute('data-rotate');\n+        const period = elements[i].getAttribute('data-period');\n+        if (toRotate) {\n+            new TxtRotate(elements[i], JSON.parse(toRotate), period);\n+        }\n+    }\n+    \n+    // Theme toggle functionality\n+    function initTheme() {\n+        const themeToggle = document.getElementById('checkbox');\n+        const currentTheme = localStorage.getItem('theme') || 'light';\n+        \n+        // Set initial theme\n+        document.documentElement.setAttribute('data-theme', currentTheme);\n+        themeToggle.checked = currentTheme === 'dark';\n+        \n+        // Theme toggle event\n+        themeToggle.addEventListener('change', function() {\n+            const newTheme = this.checked ? 'dark' : 'light';\n+            document.documentElement.setAttribute('data-theme', newTheme);\n+            localStorage.setItem('theme', newTheme);\n+            \n+            // Add transition effect\n+            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\n+        });\n+    }\n+    \n+    // Navbar scroll effect\n+    const header = document.querySelector('header');\n+    \n+    if (header) {\n+        window.addEventListener('scroll', function() {\n+            if (window.scrollY > 100) {\n+                header.classList.add('scrolled');\n+            } else {\n+                header.classList.remove('scrolled');\n+            }\n+        });\n+    }\n+    \n+    // Intersection Observer for animations\n+    const observerOptions = {\n+        threshold: 0.1,\n+        rootMargin: '0px 0px -50px 0px'\n+    };\n+    \n+    // Animate elements on scroll\n+    const animateOnScroll = new IntersectionObserver(function(entries, observer) {\n+        entries.forEach(entry => {\n+            if (entry.isIntersecting) {\n+                entry.target.classList.add('animate-in');\n+                observer.unobserve(entry.target);\n+            }\n+        });\n+    }, observerOptions);\n+    \n+    // Observe elements for animation\n+    const animatedElements = document.querySelectorAll('.project-card, .skill-category, .timeline-item');\n+    animatedElements.forEach(el => {\n+        el.style.opacity = '0';\n+        el.style.transform = 'translateY(30px)';\n+        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n+        animateOnScroll.observe(el);\n+    });\n+    \n+    // Add animation class\n+    document.addEventListener('scroll', function() {\n+        animatedElements.forEach(el => {\n+            if (el.classList.contains('animate-in')) {\n+                el.style.opacity = '1';\n+                el.style.transform = 'translateY(0)';\n+            }\n+        });\n+    });\n+    \n+    // Animate skill bars on scroll\n+    const skillSection = document.querySelector('.skills-progress');\n+    \n+    if (skillSection) {\n+        const skillObserver = new IntersectionObserver((entries) => {\n+            entries.forEach(entry => {\n+                if (entry.isIntersecting) {\n+                    const skillBars = document.querySelectorAll('.skill-level');\n+                    skillBars.forEach((bar, index) => {\n+                        setTimeout(() => {\n+                            const width = bar.getAttribute('data-level');\n+                            bar.style.width = width;\n+                        }, index * 200);\n+                    });\n+                    skillObserver.unobserve(entry.target);\n+                }\n+            });\n+        }, { threshold: 0.5 });\n+        \n+        skillObserver.observe(skillSection);\n+    }\n+    \n+    // Portfolio image popup functionality\n+    const projectImages = document.querySelectorAll('.project-img img');\n+    \n+    projectImages.forEach(img => {\n+        img.addEventListener('click', function() {\n+            createImagePopup(this.src, this.alt);\n+        });\n+    });\n+    \n+    function createImagePopup(src, alt) {\n+        const overlay = document.createElement('div');\n+        overlay.className = 'image-popup-overlay';\n+        overlay.style.cssText = `\n+            position: fixed;\n+            top: 0;\n+            left: 0;\n+            width: 100%;\n+            height: 100%;\n+            background: rgba(0, 0, 0, 0.9);\n+            display: flex;\n+            align-items: center;\n+            justify-content: center;\n+            z-index: 10000;\n+            opacity: 0;\n+            transition: opacity 0.3s ease;\n+        `;\n+        \n+        const popupContent = document.createElement('div');\n+        popupContent.style.cssText = `\n+            position: relative;\n+            max-width: 90%;\n+            max-height: 90%;\n+            transform: scale(0.8);\n+            transition: transform 0.3s ease;\n+        `;\n+        \n+        const popupImg = document.createElement('img');\n+        popupImg.src = src;\n+        popupImg.alt = alt;\n+        popupImg.style.cssText = `\n+            width: 100%;\n+            height: auto;\n+            border-radius: 8px;\n+            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\n+        `;\n+        \n+        const closeBtn = document.createElement('div');\n+        closeBtn.innerHTML = '&times;';\n+        closeBtn.style.cssText = `\n+            position: absolute;\n+            top: -40px;\n+            right: 0;\n+            width: 30px;\n+            height: 30px;\n+            background: rgba(255, 255, 255, 0.2);\n+            color: white;\n+            border-radius: 50%;\n+            display: flex;\n+            align-items: center;\n+            justify-content: center;\n+            cursor: pointer;\n+            font-size: 20px;\n+            transition: background 0.3s ease;\n+        `;\n+        \n+        closeBtn.addEventListener('mouseenter', function() {\n+            this.style.background = 'rgba(255, 255, 255, 0.3)';\n+        });\n+        \n+        closeBtn.addEventListener('mouseleave', function() {\n+            this.style.background = 'rgba(255, 255, 255, 0.2)';\n+        });\n+        \n+        popupContent.appendChild(popupImg);\n+        popupContent.appendChild(closeBtn);\n+        overlay.appendChild(popupContent);\n+        document.body.appendChild(overlay);\n+        \n+        // Prevent scrolling when popup is open\n+        document.body.style.overflow = 'hidden';\n+        \n+        // Animate in\n+        setTimeout(() => {\n+            overlay.style.opacity = '1';\n+            popupContent.style.transform = 'scale(1)';\n+        }, 10);\n+        \n+        // Close popup when clicking close button or overlay\n+        closeBtn.addEventListener('click', closePopup);\n+        overlay.addEventListener('click', function(e) {\n+            if (e.target === overlay) {\n+                closePopup();\n+            }\n+        });\n+        \n+        // Close on escape key\n+        document.addEventListener('keydown', function(e) {\n+            if (e.key === 'Escape') {\n+                closePopup();\n+            }\n+        });\n+        \n+        function closePopup() {\n+            overlay.style.opacity = '0';\n+            popupContent.style.transform = 'scale(0.8)';\n+            setTimeout(() => {\n+                document.body.removeChild(overlay);\n+                document.body.style.overflow = '';\n+            }, 300);\n+        }\n+    }\n+    \n+    // Form submission with validation\n+    const contactForm = document.getElementById('contactForm');\n+    \n+    if (contactForm) {\n+        contactForm.addEventListener('submit', function(e) {\n+            e.preventDefault();\n+            \n+            // Basic validation\n+            let isValid = true;\n+            const formElements = this.elements;\n+            \n+            for (let i = 0; i < formElements.length; i++) {\n+                if (formElements[i].hasAttribute('required') && formElements[i].value.trim() === '') {\n+                    isValid = false;\n+                    formElements[i].classList.add('error');\n+                } else {\n+                    formElements[i].classList.remove('error');\n+                }\n+            }\n+            \n+            if (isValid) {\n+                // Show loading state\n+                const submitBtn = this.querySelector('button[type=\"submit\"]');\n+                const originalText = submitBtn.innerHTML;\n+                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\n+                submitBtn.disabled = true;\n+                \n+                // Simulate form submission (replace with actual form handling)\n+                setTimeout(() => {\n+                    // Show success message\n+                    showNotification('Message sent successfully!', 'success');\n+                    \n+                    // Reset form\n+                    this.reset();\n+                    \n+                    // Reset button\n+                    submitBtn.innerHTML = originalText;\n+                    submitBtn.disabled = false;\n+                }, 2000);\n+            } else {\n+                showNotification('Please fill in all required fields.', 'error');\n+            }\n+        });\n+    }\n+    \n+    // Notification system\n+    function showNotification(message, type = 'info') {\n+        const notification = document.createElement('div');\n+        notification.className = `notification notification-${type}`;\n+        notification.style.cssText = `\n+            position: fixed;\n+            top: 20px;\n+            right: 20px;\n+            padding: 15px 20px;\n+            border-radius: 8px;\n+            color: white;\n+            font-weight: 500;\n+            z-index: 10001;\n+            transform: translateX(100%);\n+            transition: transform 0.3s ease;\n+            max-width: 300px;\n+        `;\n+        \n+        // Set colors based on type\n+        switch(type) {\n+            case 'success':\n+                notification.style.background = '#10b981';\n+                break;\n+            case 'error':\n+                notification.style.background = '#ef4444';\n+                break;\n+            default:\n+                notification.style.background = '#3b82f6';\n+        }\n+        \n+        notification.textContent = message;\n+        document.body.appendChild(notification);\n+        \n+        // Animate in\n+        setTimeout(() => {\n+            notification.style.transform = 'translateX(0)';\n+        }, 10);\n+        \n+        // Auto remove after 5 seconds\n+        setTimeout(() => {\n+            notification.style.transform = 'translateX(100%)';\n+            setTimeout(() => {\n+                if (document.body.contains(notification)) {\n+                    document.body.removeChild(notification);\n+                }\n+            }, 300);\n+        }, 5000);\n+    }\n+    \n+    // Smooth reveal animation for sections\n+    const sections = document.querySelectorAll('section');\n+    const sectionObserver = new IntersectionObserver((entries) => {\n+        entries.forEach(entry => {\n+            if (entry.isIntersecting) {\n+                entry.target.classList.add('section-visible');\n+            }\n+        });\n+    }, { threshold: 0.1 });\n+    \n+    sections.forEach(section => {\n+        section.style.opacity = '0';\n+        section.style.transform = 'translateY(30px)';\n+        section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\n+        sectionObserver.observe(section);\n+    });\n+    \n+    // Add section visibility class\n+    document.addEventListener('scroll', function() {\n+        sections.forEach(section => {\n+            if (section.classList.contains('section-visible')) {\n+                section.style.opacity = '1';\n+                section.style.transform = 'translateY(0)';\n+            }\n+        });\n+    });\n+    \n+    // Parallax effect for hero section\n+    const hero = document.querySelector('.hero');\n+    if (hero) {\n+        window.addEventListener('scroll', function() {\n+            const scrolled = window.pageYOffset;\n+            const rate = scrolled * -0.5;\n+            hero.style.transform = `translateY(${rate}px)`;\n+        });\n+    }\n+    \n+    // Add floating animation to hero image\n+    const heroImage = document.querySelector('.image-container');\n+    if (heroImage) {\n+        heroImage.style.animation = 'float 6s ease-in-out infinite';\n+    }\n+    \n+    // Add CSS for float animation if not exists\n+    if (!document.querySelector('#float-animation')) {\n+        const style = document.createElement('style');\n+        style.id = 'float-animation';\n+        style.textContent = `\n+            @keyframes float {\n+                0%, 100% { transform: translateY(0px); }\n+                50% { transform: translateY(-20px); }\n+            }\n+        `;\n+        document.head.appendChild(style);\n+    }\n+    \n+    // Initialize particles effect (if particles.js is loaded)\n+    if (typeof particlesJS !== 'undefined' && document.getElementById('particles-js')) {\n+        particlesJS('particles-js', {\n+            particles: {\n+                number: { value: 80, density: { enable: true, value_area: 800 } },\n+                color: { value: \"#6366f1\" },\n+                shape: { type: \"circle\" },\n+                opacity: { value: 0.5, random: false },\n+                size: { value: 3, random: true },\n+                line_linked: {\n+                    enable: true,\n+                    distance: 150,\n+                    color: \"#6366f1\",\n+                    opacity: 0.4,\n+                    width: 1\n+                },\n+                move: {\n+                    enable: true,\n+                    speed: 6,\n+                    direction: \"none\",\n+                    random: false,\n+                    straight: false,\n+                    out_mode: \"out\",\n+                    bounce: false\n+                }\n+            },\n+            interactivity: {\n+                detect_on: \"canvas\",\n+                events: {\n+                    onhover: { enable: true, mode: \"repulse\" },\n+                    onclick: { enable: true, mode: \"push\" },\n+                    resize: true\n+                }\n+            },\n+            retina_detect: true\n+        });\n+    }\n+    \n+    // Add scroll progress indicator\n+    const progressBar = document.createElement('div');\n+    progressBar.style.cssText = `\n+        position: fixed;\n+        top: 0;\n+        left: 0;\n+        width: 0%;\n+        height: 3px;\n+        background: linear-gradient(90deg, #6366f1, #06b6d4);\n+        z-index: 10000;\n+        transition: width 0.1s ease;\n+    `;\n+    document.body.appendChild(progressBar);\n+    \n+    window.addEventListener('scroll', function() {\n+        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\n+        progressBar.style.width = scrolled + '%';\n+    });\n+    \n+    // Add hover effects to project cards\n+    projectCards.forEach(card => {\n+        card.addEventListener('mouseenter', function() {\n+            this.style.transform = 'translateY(-10px) scale(1.02)';\n+        });\n+        \n+        card.addEventListener('mouseleave', function() {\n+            this.style.transform = 'translateY(0) scale(1)';\n+        });\n+    });\n+    \n+    // Add typing effect to hero text\n+    function typeWriter(element, text, speed = 100) {\n+        let i = 0;\n+        element.innerHTML = '';\n+        \n+        function type() {\n+            if (i < text.length) {\n+                element.innerHTML += text.charAt(i);\n+                i++;\n+                setTimeout(type, speed);\n+            }\n+        }\n+        \n+        type();\n+    }\n+    \n+    // Initialize typing effect for hero title\n+    const heroTitle = document.querySelector('.title .txt-rotate');\n+    if (heroTitle && heroTitle.textContent) {\n+        const originalText = heroTitle.textContent;\n+        setTimeout(() => {\n+            typeWriter(heroTitle, originalText, 50);\n+        }, 1000);\n+    }\n+    \n+    // Add scroll-triggered animations\n+    const animatedElements = document.querySelectorAll('.animate-on-scroll');\n+    const scrollObserver = new IntersectionObserver((entries) => {\n+        entries.forEach(entry => {\n+            if (entry.isIntersecting) {\n+                entry.target.classList.add('animated');\n+            }\n+        });\n+    }, { threshold: 0.1 });\n+    \n+    animatedElements.forEach(el => {\n+        scrollObserver.observe(el);\n+    });\n+    \n+    // Performance optimization: Throttle scroll events\n+    let ticking = false;\n+    \n+    function updateOnScroll() {\n+        // Update scroll-based animations here\n+        ticking = false;\n+    }\n+    \n+    function requestTick() {\n+        if (!ticking) {\n+            requestAnimationFrame(updateOnScroll);\n+            ticking = true;\n+        }\n+    }\n+    \n+    window.addEventListener('scroll', requestTick);\n+    \n+    // Add keyboard navigation support\n+    document.addEventListener('keydown', function(e) {\n+        // Escape key closes any open modals/popups\n+        if (e.key === 'Escape') {\n+            const popup = document.querySelector('.image-popup-overlay');\n+            if (popup) {\n+                popup.click();\n+            }\n+        }\n+        \n+        // Tab key navigation enhancement\n+        if (e.key === 'Tab') {\n+            document.body.classList.add('keyboard-navigation');\n+        }\n+    });\n+    \n+    // Remove keyboard navigation class on mouse use\n+    document.addEventListener('mousedown', function() {\n+        document.body.classList.remove('keyboard-navigation');\n+    });\n+    \n+    // Add focus styles for keyboard navigation\n+    document.addEventListener('keydown', function(e) {\n+        if (e.key === 'Tab') {\n+            document.body.classList.add('keyboard-navigation');\n+        }\n+    });\n+    \n+    // Initialize tooltips for project actions\n+    const projectActions = document.querySelectorAll('.project-link, .project-code');\n+    projectActions.forEach(action => {\n+        const tooltip = document.createElement('div');\n+        tooltip.className = 'tooltip';\n+        tooltip.textContent = action.title || 'View Project';\n+        tooltip.style.cssText = `\n+            position: absolute;\n+            background: rgba(0, 0, 0, 0.8);\n+            color: white;\n+            padding: 5px 10px;\n+            border-radius: 4px;\n+            font-size: 12px;\n+            white-space: nowrap;\n+            opacity: 0;\n+            pointer-events: none;\n+            transition: opacity 0.3s ease;\n+            z-index: 1000;\n+        `;\n+        \n+        action.appendChild(tooltip);\n+        \n+        action.addEventListener('mouseenter', function() {\n+            tooltip.style.opacity = '1';\n+        });\n+        \n+        action.addEventListener('mouseleave', function() {\n+            tooltip.style.opacity = '0';\n+        });\n+    });\n+    \n+    // Add loading animation for images\n+    const images = document.querySelectorAll('img');\n+    images.forEach(img => {\n+        img.addEventListener('load', function() {\n+            this.style.opacity = '1';\n+        });\n+        \n+        img.style.opacity = '0';\n+        img.style.transition = 'opacity 0.3s ease';\n+    });\n+    \n+    // Initialize the page\n+    console.log('Portfolio initialized successfully! 🚀');\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755588836173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,678 +1,688 @@\n-document.addEventListener('DOMContentLoaded', function() {\n-    // Initialize theme\n-    initTheme();\n-    \n-    // Mobile Navigation\n-    const hamburger = document.querySelector('.hamburger');\n-    const navLinks = document.querySelector('.nav-links');\n-    \n-    if (hamburger) {\n-        hamburger.addEventListener('click', function() {\n-            this.classList.toggle('active');\n-            navLinks.classList.toggle('active');\n-        });\n-    }\n-    \n-    // Close mobile nav when clicking on a link\n-    const navItems = document.querySelectorAll('.nav-links a');\n-    navItems.forEach(item => {\n-        item.addEventListener('click', function() {\n-            if (hamburger && hamburger.classList.contains('active')) {\n-                hamburger.classList.remove('active');\n-                navLinks.classList.remove('active');\n-            }\n-        });\n-    });\n-    \n-    // Smooth scrolling for anchor links\n-    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n-        anchor.addEventListener('click', function(e) {\n-            e.preventDefault();\n-            const target = document.querySelector(this.getAttribute('href'));\n-            \n-            if (target) {\n-                const headerHeight = document.querySelector('header').offsetHeight;\n-                window.scrollTo({\n-                    top: target.offsetTop - headerHeight - 20,\n-                    behavior: 'smooth'\n-                });\n-            }\n-        });\n-    });\n-    \n-    // Project filtering\n-    const filterButtons = document.querySelectorAll('.filter-btn');\n-    const projectCards = document.querySelectorAll('.project-card');\n-    \n-    if (filterButtons.length > 0) {\n-        filterButtons.forEach(button => {\n-            button.addEventListener('click', function() {\n-                // Remove active class from all buttons\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\n-                \n-                // Add active class to clicked button\n-                this.classList.add('active');\n-                \n-                const filter = this.getAttribute('data-filter');\n-                \n-                // Animate project cards\n-                projectCards.forEach((card, index) => {\n-                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\n-                        card.style.display = 'block';\n-                        setTimeout(() => {\n-                            card.style.opacity = '1';\n-                            card.style.transform = 'translateY(0)';\n-                        }, index * 100);\n-                    } else {\n-                        card.style.opacity = '0';\n-                        card.style.transform = 'translateY(20px)';\n-                        setTimeout(() => {\n-                        card.style.display = 'none';\n-                        }, 300);\n-                    }\n-                });\n-            });\n-        });\n-    }\n-    \n-    // Animated Text Rotation\n-    function TxtRotate(el, toRotate, period) {\n-        this.toRotate = toRotate;\n-        this.el = el;\n-        this.loopNum = 0;\n-        this.period = parseInt(period, 10) || 2000;\n-        this.txt = '';\n-        this.tick();\n-        this.isDeleting = false;\n-    }\n-    \n-    TxtRotate.prototype.tick = function() {\n-        const i = this.loopNum % this.toRotate.length;\n-        const fullTxt = this.toRotate[i];\n-        \n-        if (this.isDeleting) {\n-            this.txt = fullTxt.substring(0, this.txt.length - 1);\n-        } else {\n-            this.txt = fullTxt.substring(0, this.txt.length + 1);\n-        }\n-        \n-        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\n-        \n-        const that = this;\n-        let delta = 200 - Math.random() * 100;\n-        \n-        if (this.isDeleting) { delta /= 2; }\n-        \n-        if (!this.isDeleting && this.txt === fullTxt) {\n-            delta = this.period;\n-            this.isDeleting = true;\n-        } else if (this.isDeleting && this.txt === '') {\n-            this.isDeleting = false;\n-            this.loopNum++;\n-            delta = 500;\n-        }\n-        \n-        setTimeout(function() {\n-            that.tick();\n-        }, delta);\n-    };\n-    \n-    // Start text rotation\n-    const elements = document.getElementsByClassName('txt-rotate');\n-    for (let i = 0; i < elements.length; i++) {\n-        const toRotate = elements[i].getAttribute('data-rotate');\n-        const period = elements[i].getAttribute('data-period');\n-        if (toRotate) {\n-            new TxtRotate(elements[i], JSON.parse(toRotate), period);\n-        }\n-    }\n-    \n-    // Theme toggle functionality\n-    function initTheme() {\n-        const themeToggle = document.getElementById('checkbox');\n-        const currentTheme = localStorage.getItem('theme') || 'light';\n-        \n-        // Set initial theme\n-        document.documentElement.setAttribute('data-theme', currentTheme);\n-        themeToggle.checked = currentTheme === 'dark';\n-        \n-        // Theme toggle event\n-        themeToggle.addEventListener('change', function() {\n-            const newTheme = this.checked ? 'dark' : 'light';\n-            document.documentElement.setAttribute('data-theme', newTheme);\n-            localStorage.setItem('theme', newTheme);\n-            \n-            // Add transition effect\n-            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\n-        });\n-    }\n-    \n-    // Navbar scroll effect\n-    const header = document.querySelector('header');\n-    \n-    if (header) {\n-        window.addEventListener('scroll', function() {\n-            if (window.scrollY > 100) {\n-                header.classList.add('scrolled');\n-            } else {\n-                header.classList.remove('scrolled');\n-            }\n-        });\n-    }\n-    \n-    // Intersection Observer for animations\n-    const observerOptions = {\n-        threshold: 0.1,\n-        rootMargin: '0px 0px -50px 0px'\n-    };\n-    \n-    // Animate elements on scroll\n-    const animateOnScroll = new IntersectionObserver(function(entries, observer) {\n-        entries.forEach(entry => {\n-            if (entry.isIntersecting) {\n-                entry.target.classList.add('animate-in');\n-                observer.unobserve(entry.target);\n-            }\n-        });\n-    }, observerOptions);\n-    \n-    // Observe elements for animation\n-    const animatedElements = document.querySelectorAll('.project-card, .skill-category, .timeline-item');\n-    animatedElements.forEach(el => {\n-        el.style.opacity = '0';\n-        el.style.transform = 'translateY(30px)';\n-        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n-        animateOnScroll.observe(el);\n-    });\n-    \n-    // Add animation class\n-    document.addEventListener('scroll', function() {\n-        animatedElements.forEach(el => {\n-            if (el.classList.contains('animate-in')) {\n-                el.style.opacity = '1';\n-                el.style.transform = 'translateY(0)';\n-            }\n-        });\n-    });\n-    \n-    // Animate skill bars on scroll\n-    const skillSection = document.querySelector('.skills-progress');\n-    \n-    if (skillSection) {\n-        const skillObserver = new IntersectionObserver((entries) => {\n-            entries.forEach(entry => {\n-                if (entry.isIntersecting) {\n-                    const skillBars = document.querySelectorAll('.skill-level');\n-                    skillBars.forEach((bar, index) => {\n-                        setTimeout(() => {\n-                            const width = bar.getAttribute('data-level');\n-                            bar.style.width = width;\n-                        }, index * 200);\n-                    });\n-                    skillObserver.unobserve(entry.target);\n-                }\n-            });\n-        }, { threshold: 0.5 });\n-        \n-        skillObserver.observe(skillSection);\n-    }\n-    \n-    // Portfolio image popup functionality\n-    const projectImages = document.querySelectorAll('.project-img img');\n-    \n-    projectImages.forEach(img => {\n-        img.addEventListener('click', function() {\n-            createImagePopup(this.src, this.alt);\n-        });\n-    });\n-    \n-    function createImagePopup(src, alt) {\n-        const overlay = document.createElement('div');\n-        overlay.className = 'image-popup-overlay';\n-        overlay.style.cssText = `\n-            position: fixed;\n-            top: 0;\n-            left: 0;\n-            width: 100%;\n-            height: 100%;\n-            background: rgba(0, 0, 0, 0.9);\n-            display: flex;\n-            align-items: center;\n-            justify-content: center;\n-            z-index: 10000;\n-            opacity: 0;\n-            transition: opacity 0.3s ease;\n-        `;\n-        \n-        const popupContent = document.createElement('div');\n-        popupContent.style.cssText = `\n-            position: relative;\n-            max-width: 90%;\n-            max-height: 90%;\n-            transform: scale(0.8);\n-            transition: transform 0.3s ease;\n-        `;\n-        \n-        const popupImg = document.createElement('img');\n-        popupImg.src = src;\n-        popupImg.alt = alt;\n-        popupImg.style.cssText = `\n-            width: 100%;\n-            height: auto;\n-            border-radius: 8px;\n-            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\n-        `;\n-        \n-        const closeBtn = document.createElement('div');\n-        closeBtn.innerHTML = '&times;';\n-        closeBtn.style.cssText = `\n-            position: absolute;\n-            top: -40px;\n-            right: 0;\n-            width: 30px;\n-            height: 30px;\n-            background: rgba(255, 255, 255, 0.2);\n-            color: white;\n-            border-radius: 50%;\n-            display: flex;\n-            align-items: center;\n-            justify-content: center;\n-            cursor: pointer;\n-            font-size: 20px;\n-            transition: background 0.3s ease;\n-        `;\n-        \n-        closeBtn.addEventListener('mouseenter', function() {\n-            this.style.background = 'rgba(255, 255, 255, 0.3)';\n-        });\n-        \n-        closeBtn.addEventListener('mouseleave', function() {\n-            this.style.background = 'rgba(255, 255, 255, 0.2)';\n-        });\n-        \n-        popupContent.appendChild(popupImg);\n-        popupContent.appendChild(closeBtn);\n-        overlay.appendChild(popupContent);\n-        document.body.appendChild(overlay);\n-        \n-        // Prevent scrolling when popup is open\n-        document.body.style.overflow = 'hidden';\n-        \n-        // Animate in\n-        setTimeout(() => {\n-            overlay.style.opacity = '1';\n-            popupContent.style.transform = 'scale(1)';\n-        }, 10);\n-        \n-        // Close popup when clicking close button or overlay\n-        closeBtn.addEventListener('click', closePopup);\n-        overlay.addEventListener('click', function(e) {\n-            if (e.target === overlay) {\n-                closePopup();\n-            }\n-        });\n-        \n-        // Close on escape key\n-        document.addEventListener('keydown', function(e) {\n-            if (e.key === 'Escape') {\n-                closePopup();\n-            }\n-        });\n-        \n-        function closePopup() {\n-            overlay.style.opacity = '0';\n-            popupContent.style.transform = 'scale(0.8)';\n-            setTimeout(() => {\n-                document.body.removeChild(overlay);\n-                document.body.style.overflow = '';\n-            }, 300);\n-        }\n-    }\n-    \n-    // Form submission with validation\n-    const contactForm = document.getElementById('contactForm');\n-    \n-    if (contactForm) {\n-        contactForm.addEventListener('submit', function(e) {\n-            e.preventDefault();\n-            \n-            // Basic validation\n-            let isValid = true;\n-            const formElements = this.elements;\n-            \n-            for (let i = 0; i < formElements.length; i++) {\n-                if (formElements[i].hasAttribute('required') && formElements[i].value.trim() === '') {\n-                    isValid = false;\n-                    formElements[i].classList.add('error');\n-                } else {\n-                    formElements[i].classList.remove('error');\n-                }\n-            }\n-            \n-            if (isValid) {\n-                // Show loading state\n-                const submitBtn = this.querySelector('button[type=\"submit\"]');\n-                const originalText = submitBtn.innerHTML;\n-                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\n-                submitBtn.disabled = true;\n-                \n-                // Simulate form submission (replace with actual form handling)\n-                setTimeout(() => {\n-                    // Show success message\n-                    showNotification('Message sent successfully!', 'success');\n-                    \n-                    // Reset form\n-                    this.reset();\n-                    \n-                    // Reset button\n-                    submitBtn.innerHTML = originalText;\n-                    submitBtn.disabled = false;\n-                }, 2000);\n-            } else {\n-                showNotification('Please fill in all required fields.', 'error');\n-            }\n-        });\n-    }\n-    \n-    // Notification system\n-    function showNotification(message, type = 'info') {\n-        const notification = document.createElement('div');\n-        notification.className = `notification notification-${type}`;\n-        notification.style.cssText = `\n-            position: fixed;\n-            top: 20px;\n-            right: 20px;\n-            padding: 15px 20px;\n-            border-radius: 8px;\n-            color: white;\n-            font-weight: 500;\n-            z-index: 10001;\n-            transform: translateX(100%);\n-            transition: transform 0.3s ease;\n-            max-width: 300px;\n-        `;\n-        \n-        // Set colors based on type\n-        switch(type) {\n-            case 'success':\n-                notification.style.background = '#10b981';\n-                break;\n-            case 'error':\n-                notification.style.background = '#ef4444';\n-                break;\n-            default:\n-                notification.style.background = '#3b82f6';\n-        }\n-        \n-        notification.textContent = message;\n-        document.body.appendChild(notification);\n-        \n-        // Animate in\n-        setTimeout(() => {\n-            notification.style.transform = 'translateX(0)';\n-        }, 10);\n-        \n-        // Auto remove after 5 seconds\n-        setTimeout(() => {\n-            notification.style.transform = 'translateX(100%)';\n-            setTimeout(() => {\n-                if (document.body.contains(notification)) {\n-                    document.body.removeChild(notification);\n-                }\n-            }, 300);\n-        }, 5000);\n-    }\n-    \n-    // Smooth reveal animation for sections\n-    const sections = document.querySelectorAll('section');\n-    const sectionObserver = new IntersectionObserver((entries) => {\n-        entries.forEach(entry => {\n-            if (entry.isIntersecting) {\n-                entry.target.classList.add('section-visible');\n-            }\n-        });\n-    }, { threshold: 0.1 });\n-    \n-    sections.forEach(section => {\n-        section.style.opacity = '0';\n-        section.style.transform = 'translateY(30px)';\n-        section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\n-        sectionObserver.observe(section);\n-    });\n-    \n-    // Add section visibility class\n-    document.addEventListener('scroll', function() {\n-        sections.forEach(section => {\n-            if (section.classList.contains('section-visible')) {\n-                section.style.opacity = '1';\n-                section.style.transform = 'translateY(0)';\n-            }\n-        });\n-    });\n-    \n-    // Parallax effect for hero section\n-    const hero = document.querySelector('.hero');\n-    if (hero) {\n-        window.addEventListener('scroll', function() {\n-            const scrolled = window.pageYOffset;\n-            const rate = scrolled * -0.5;\n-            hero.style.transform = `translateY(${rate}px)`;\n-        });\n-    }\n-    \n-    // Add floating animation to hero image\n-    const heroImage = document.querySelector('.image-container');\n-    if (heroImage) {\n-        heroImage.style.animation = 'float 6s ease-in-out infinite';\n-    }\n-    \n-    // Add CSS for float animation if not exists\n-    if (!document.querySelector('#float-animation')) {\n-        const style = document.createElement('style');\n-        style.id = 'float-animation';\n-        style.textContent = `\n-            @keyframes float {\n-                0%, 100% { transform: translateY(0px); }\n-                50% { transform: translateY(-20px); }\n-            }\n-        `;\n-        document.head.appendChild(style);\n-    }\n-    \n-    // Initialize particles effect (if particles.js is loaded)\n-    if (typeof particlesJS !== 'undefined' && document.getElementById('particles-js')) {\n-        particlesJS('particles-js', {\n-            particles: {\n-                number: { value: 80, density: { enable: true, value_area: 800 } },\n-                color: { value: \"#6366f1\" },\n-                shape: { type: \"circle\" },\n-                opacity: { value: 0.5, random: false },\n-                size: { value: 3, random: true },\n-                line_linked: {\n-                    enable: true,\n-                    distance: 150,\n-                    color: \"#6366f1\",\n-                    opacity: 0.4,\n-                    width: 1\n-                },\n-                move: {\n-                    enable: true,\n-                    speed: 6,\n-                    direction: \"none\",\n-                    random: false,\n-                    straight: false,\n-                    out_mode: \"out\",\n-                    bounce: false\n-                }\n-            },\n-            interactivity: {\n-                detect_on: \"canvas\",\n-                events: {\n-                    onhover: { enable: true, mode: \"repulse\" },\n-                    onclick: { enable: true, mode: \"push\" },\n-                    resize: true\n-                }\n-            },\n-            retina_detect: true\n-        });\n-    }\n-    \n-    // Add scroll progress indicator\n-    const progressBar = document.createElement('div');\n-    progressBar.style.cssText = `\n-        position: fixed;\n-        top: 0;\n-        left: 0;\n-        width: 0%;\n-        height: 3px;\n-        background: linear-gradient(90deg, #6366f1, #06b6d4);\n-        z-index: 10000;\n-        transition: width 0.1s ease;\n-    `;\n-    document.body.appendChild(progressBar);\n-    \n-    window.addEventListener('scroll', function() {\n-        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\n-        progressBar.style.width = scrolled + '%';\n-    });\n-    \n-    // Add hover effects to project cards\n-    projectCards.forEach(card => {\n-        card.addEventListener('mouseenter', function() {\n-            this.style.transform = 'translateY(-10px) scale(1.02)';\n-        });\n-        \n-        card.addEventListener('mouseleave', function() {\n-            this.style.transform = 'translateY(0) scale(1)';\n-        });\n-    });\n-    \n-    // Add typing effect to hero text\n-    function typeWriter(element, text, speed = 100) {\n-        let i = 0;\n-        element.innerHTML = '';\n-        \n-        function type() {\n-            if (i < text.length) {\n-                element.innerHTML += text.charAt(i);\n-                i++;\n-                setTimeout(type, speed);\n-            }\n-        }\n-        \n-        type();\n-    }\n-    \n-    // Initialize typing effect for hero title\n-    const heroTitle = document.querySelector('.title .txt-rotate');\n-    if (heroTitle && heroTitle.textContent) {\n-        const originalText = heroTitle.textContent;\n-        setTimeout(() => {\n-            typeWriter(heroTitle, originalText, 50);\n-        }, 1000);\n-    }\n-    \n-    // Add scroll-triggered animations\n-    const animatedElements = document.querySelectorAll('.animate-on-scroll');\n-    const scrollObserver = new IntersectionObserver((entries) => {\n-        entries.forEach(entry => {\n-            if (entry.isIntersecting) {\n-                entry.target.classList.add('animated');\n-            }\n-        });\n-    }, { threshold: 0.1 });\n-    \n-    animatedElements.forEach(el => {\n-        scrollObserver.observe(el);\n-    });\n-    \n-    // Performance optimization: Throttle scroll events\n-    let ticking = false;\n-    \n-    function updateOnScroll() {\n-        // Update scroll-based animations here\n-        ticking = false;\n-    }\n-    \n-    function requestTick() {\n-        if (!ticking) {\n-            requestAnimationFrame(updateOnScroll);\n-            ticking = true;\n-        }\n-    }\n-    \n-    window.addEventListener('scroll', requestTick);\n-    \n-    // Add keyboard navigation support\n-    document.addEventListener('keydown', function(e) {\n-        // Escape key closes any open modals/popups\n-        if (e.key === 'Escape') {\n-            const popup = document.querySelector('.image-popup-overlay');\n-            if (popup) {\n-                popup.click();\n-            }\n-        }\n-        \n-        // Tab key navigation enhancement\n-        if (e.key === 'Tab') {\n-            document.body.classList.add('keyboard-navigation');\n-        }\n-    });\n-    \n-    // Remove keyboard navigation class on mouse use\n-    document.addEventListener('mousedown', function() {\n-        document.body.classList.remove('keyboard-navigation');\n-    });\n-    \n-    // Add focus styles for keyboard navigation\n-    document.addEventListener('keydown', function(e) {\n-        if (e.key === 'Tab') {\n-            document.body.classList.add('keyboard-navigation');\n-        }\n-    });\n-    \n-    // Initialize tooltips for project actions\n-    const projectActions = document.querySelectorAll('.project-link, .project-code');\n-    projectActions.forEach(action => {\n-        const tooltip = document.createElement('div');\n-        tooltip.className = 'tooltip';\n-        tooltip.textContent = action.title || 'View Project';\n-        tooltip.style.cssText = `\n-            position: absolute;\n-            background: rgba(0, 0, 0, 0.8);\n-            color: white;\n-            padding: 5px 10px;\n-            border-radius: 4px;\n-            font-size: 12px;\n-            white-space: nowrap;\n-            opacity: 0;\n-            pointer-events: none;\n-            transition: opacity 0.3s ease;\n-            z-index: 1000;\n-        `;\n-        \n-        action.appendChild(tooltip);\n-        \n-        action.addEventListener('mouseenter', function() {\n-            tooltip.style.opacity = '1';\n-        });\n-        \n-        action.addEventListener('mouseleave', function() {\n-            tooltip.style.opacity = '0';\n-        });\n-    });\n-    \n-    // Add loading animation for images\n-    const images = document.querySelectorAll('img');\n-    images.forEach(img => {\n-        img.addEventListener('load', function() {\n-            this.style.opacity = '1';\n-        });\n-        \n-        img.style.opacity = '0';\n-        img.style.transition = 'opacity 0.3s ease';\n-    });\n-    \n-    // Initialize the page\n-    console.log('Portfolio initialized successfully! 🚀');\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // Initialize theme\r\n+    initTheme();\r\n+    \r\n+    // Mobile Navigation\r\n+    const hamburger = document.querySelector('.hamburger');\r\n+    const navLinks = document.querySelector('.nav-links');\r\n+    \r\n+    if (hamburger) {\r\n+        hamburger.addEventListener('click', function() {\r\n+            this.classList.toggle('active');\r\n+            navLinks.classList.toggle('active');\r\n+        });\r\n+    }\r\n+    \r\n+    // Close mobile nav when clicking on a link\r\n+    const navItems = document.querySelectorAll('.nav-links a');\r\n+    navItems.forEach(item => {\r\n+        item.addEventListener('click', function() {\r\n+            if (hamburger && hamburger.classList.contains('active')) {\r\n+                hamburger.classList.remove('active');\r\n+                navLinks.classList.remove('active');\r\n+            }\r\n+        });\r\n+    });\r\n+    \r\n+    // Smooth scrolling for anchor links\r\n+    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n+        anchor.addEventListener('click', function(e) {\r\n+            e.preventDefault();\r\n+            const target = document.querySelector(this.getAttribute('href'));\r\n+            \r\n+            if (target) {\r\n+                const headerHeight = document.querySelector('header').offsetHeight;\r\n+                window.scrollTo({\r\n+                    top: target.offsetTop - headerHeight - 20,\r\n+                    behavior: 'smooth'\r\n+                });\r\n+            }\r\n+        });\r\n+    });\r\n+    \r\n+    // Project filtering\r\n+    const filterButtons = document.querySelectorAll('.filter-btn');\r\n+    const projectCards = document.querySelectorAll('.project-card');\r\n+    \r\n+    if (filterButtons.length > 0) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', function() {\r\n+                // Remove active class from all buttons\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                \r\n+                // Add active class to clicked button\r\n+                this.classList.add('active');\r\n+                \r\n+                const filter = this.getAttribute('data-filter');\r\n+                \r\n+                // Animate project cards\r\n+                projectCards.forEach((card, index) => {\r\n+                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\r\n+                        card.style.display = 'block';\r\n+                        setTimeout(() => {\r\n+                            card.style.opacity = '1';\r\n+                            card.style.transform = 'translateY(0)';\r\n+                        }, index * 100);\r\n+                    } else {\r\n+                        card.style.opacity = '0';\r\n+                        card.style.transform = 'translateY(20px)';\r\n+                        setTimeout(() => {\r\n+                        card.style.display = 'none';\r\n+                        }, 300);\r\n+                    }\r\n+                });\r\n+            });\r\n+        });\r\n+    }\r\n+    \r\n+    // Animated Text Rotation\r\n+    function TxtRotate(el, toRotate, period) {\r\n+        this.toRotate = toRotate;\r\n+        this.el = el;\r\n+        this.loopNum = 0;\r\n+        this.period = parseInt(period, 10) || 2000;\r\n+        this.txt = '';\r\n+        this.tick();\r\n+        this.isDeleting = false;\r\n+    }\r\n+    \r\n+    TxtRotate.prototype.tick = function() {\r\n+        const i = this.loopNum % this.toRotate.length;\r\n+        const fullTxt = this.toRotate[i];\r\n+        \r\n+        if (this.isDeleting) {\r\n+            this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n+        } else {\r\n+            this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n+        }\r\n+        \r\n+        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\r\n+        \r\n+        const that = this;\r\n+        let delta = 200 - Math.random() * 100;\r\n+        \r\n+        if (this.isDeleting) { delta /= 2; }\r\n+        \r\n+        if (!this.isDeleting && this.txt === fullTxt) {\r\n+            delta = this.period;\r\n+            this.isDeleting = true;\r\n+        } else if (this.isDeleting && this.txt === '') {\r\n+            this.isDeleting = false;\r\n+            this.loopNum++;\r\n+            delta = 500;\r\n+        }\r\n+        \r\n+        setTimeout(function() {\r\n+            that.tick();\r\n+        }, delta);\r\n+    };\r\n+    \r\n+    // Start text rotation\r\n+    const elements = document.getElementsByClassName('txt-rotate');\r\n+    for (let i = 0; i < elements.length; i++) {\r\n+        const toRotate = elements[i].getAttribute('data-rotate');\r\n+        const period = elements[i].getAttribute('data-period');\r\n+        if (toRotate) {\r\n+            new TxtRotate(elements[i], JSON.parse(toRotate), period);\r\n+        }\r\n+    }\r\n+    \r\n+    // Theme toggle functionality\r\n+    function initTheme() {\r\n+        const themeToggle = document.getElementById('checkbox');\r\n+        const currentTheme = localStorage.getItem('theme') || 'light';\r\n+        \r\n+        // Set initial theme\r\n+        document.documentElement.setAttribute('data-theme', currentTheme);\r\n+        themeToggle.checked = currentTheme === 'dark';\r\n+        \r\n+        // Theme toggle event\r\n+        themeToggle.addEventListener('change', function() {\r\n+            const newTheme = this.checked ? 'dark' : 'light';\r\n+            document.documentElement.setAttribute('data-theme', newTheme);\r\n+            localStorage.setItem('theme', newTheme);\r\n+            \r\n+            // Add transition effect\r\n+            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\r\n+        });\r\n+    }\r\n+    \r\n+    // Navbar scroll effect\r\n+    const header = document.querySelector('header');\r\n+    \r\n+    if (header) {\r\n+        window.addEventListener('scroll', function() {\r\n+            if (window.scrollY > 100) {\r\n+                header.classList.add('scrolled');\r\n+            } else {\r\n+                header.classList.remove('scrolled');\r\n+            }\r\n+        });\r\n+    }\r\n+    \r\n+    // Intersection Observer for animations\r\n+    const observerOptions = {\r\n+        threshold: 0.1,\r\n+        rootMargin: '0px 0px -50px 0px'\r\n+    };\r\n+    \r\n+    // Animate elements on scroll\r\n+    const animateOnScroll = new IntersectionObserver(function(entries, observer) {\r\n+        entries.forEach(entry => {\r\n+            if (entry.isIntersecting) {\r\n+                entry.target.classList.add('animate-in');\r\n+                observer.unobserve(entry.target);\r\n+            }\r\n+        });\r\n+    }, observerOptions);\r\n+    \r\n+    // Observe elements for animation\r\n+    const animatedElements = document.querySelectorAll('.project-card, .skill-category, .timeline-item');\r\n+    animatedElements.forEach(el => {\r\n+        el.style.opacity = '0';\r\n+        el.style.transform = 'translateY(30px)';\r\n+        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\r\n+        animateOnScroll.observe(el);\r\n+    });\r\n+    \r\n+    // Add animation class\r\n+    document.addEventListener('scroll', function() {\r\n+        animatedElements.forEach(el => {\r\n+            if (el.classList.contains('animate-in')) {\r\n+                el.style.opacity = '1';\r\n+                el.style.transform = 'translateY(0)';\r\n+            }\r\n+        });\r\n+    });\r\n+    \r\n+    // Animate skill bars on scroll\r\n+    const skillSection = document.querySelector('.skills-progress');\r\n+    \r\n+    if (skillSection) {\r\n+        const skillObserver = new IntersectionObserver((entries) => {\r\n+            entries.forEach(entry => {\r\n+                if (entry.isIntersecting) {\r\n+                    const skillBars = document.querySelectorAll('.skill-level');\r\n+                    skillBars.forEach((bar, index) => {\r\n+                        setTimeout(() => {\r\n+                            const width = bar.getAttribute('data-level');\r\n+                            bar.style.width = width;\r\n+                        }, index * 200);\r\n+                    });\r\n+                    skillObserver.unobserve(entry.target);\r\n+                }\r\n+            });\r\n+        }, { threshold: 0.5 });\r\n+        \r\n+        skillObserver.observe(skillSection);\r\n+    }\r\n+    \r\n+    // Portfolio image popup functionality\r\n+    const projectImages = document.querySelectorAll('.project-img img');\r\n+    \r\n+    projectImages.forEach(img => {\r\n+        img.addEventListener('click', function() {\r\n+            createImagePopup(this.src, this.alt);\r\n+        });\r\n+    });\r\n+    \r\n+    function createImagePopup(src, alt) {\r\n+        const overlay = document.createElement('div');\r\n+        overlay.className = 'image-popup-overlay';\r\n+        overlay.style.cssText = `\r\n+            position: fixed;\r\n+            top: 0;\r\n+            left: 0;\r\n+            width: 100%;\r\n+            height: 100%;\r\n+            background: rgba(0, 0, 0, 0.9);\r\n+            display: flex;\r\n+            align-items: center;\r\n+            justify-content: center;\r\n+            z-index: 10000;\r\n+            opacity: 0;\r\n+            transition: opacity 0.3s ease;\r\n+        `;\r\n+        \r\n+        const popupContent = document.createElement('div');\r\n+        popupContent.style.cssText = `\r\n+            position: relative;\r\n+            max-width: 90%;\r\n+            max-height: 90%;\r\n+            transform: scale(0.8);\r\n+            transition: transform 0.3s ease;\r\n+        `;\r\n+        \r\n+        const popupImg = document.createElement('img');\r\n+        popupImg.src = src;\r\n+        popupImg.alt = alt;\r\n+        popupImg.style.cssText = `\r\n+            width: 100%;\r\n+            height: auto;\r\n+            border-radius: 8px;\r\n+            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\r\n+        `;\r\n+        \r\n+        const closeBtn = document.createElement('div');\r\n+        closeBtn.innerHTML = '&times;';\r\n+        closeBtn.style.cssText = `\r\n+            position: absolute;\r\n+            top: -40px;\r\n+            right: 0;\r\n+            width: 30px;\r\n+            height: 30px;\r\n+            background: rgba(255, 255, 255, 0.2);\r\n+            color: white;\r\n+            border-radius: 50%;\r\n+            display: flex;\r\n+            align-items: center;\r\n+            justify-content: center;\r\n+            cursor: pointer;\r\n+            font-size: 20px;\r\n+            transition: background 0.3s ease;\r\n+        `;\r\n+        \r\n+        closeBtn.addEventListener('mouseenter', function() {\r\n+            this.style.background = 'rgba(255, 255, 255, 0.3)';\r\n+        });\r\n+        \r\n+        closeBtn.addEventListener('mouseleave', function() {\r\n+            this.style.background = 'rgba(255, 255, 255, 0.2)';\r\n+        });\r\n+        \r\n+        popupContent.appendChild(popupImg);\r\n+        popupContent.appendChild(closeBtn);\r\n+        overlay.appendChild(popupContent);\r\n+        document.body.appendChild(overlay);\r\n+        \r\n+        // Prevent scrolling when popup is open\r\n+        document.body.style.overflow = 'hidden';\r\n+        \r\n+        // Animate in\r\n+        setTimeout(() => {\r\n+            overlay.style.opacity = '1';\r\n+            popupContent.style.transform = 'scale(1)';\r\n+        }, 10);\r\n+        \r\n+        // Close popup when clicking close button or overlay\r\n+        closeBtn.addEventListener('click', closePopup);\r\n+        overlay.addEventListener('click', function(e) {\r\n+            if (e.target === overlay) {\r\n+                closePopup();\r\n+            }\r\n+        });\r\n+        \r\n+        // Close on escape key\r\n+        document.addEventListener('keydown', function(e) {\r\n+            if (e.key === 'Escape') {\r\n+                closePopup();\r\n+            }\r\n+        });\r\n+        \r\n+        function closePopup() {\r\n+            overlay.style.opacity = '0';\r\n+            popupContent.style.transform = 'scale(0.8)';\r\n+            setTimeout(() => {\r\n+                document.body.removeChild(overlay);\r\n+                document.body.style.overflow = '';\r\n+            }, 300);\r\n+        }\r\n+    }\r\n+    \r\n+    // Form submission with validation\r\n+    const contactForm = document.getElementById('contactForm');\r\n+    \r\n+    if (contactForm) {\r\n+        contactForm.addEventListener('submit', function(e) {\r\n+            e.preventDefault();\r\n+            \r\n+            // Basic validation\r\n+            let isValid = true;\r\n+            const formElements = this.elements;\r\n+            \r\n+            for (let i = 0; i < formElements.length; i++) {\r\n+                if (formElements[i].hasAttribute('required') && formElements[i].value.trim() === '') {\r\n+                    isValid = false;\r\n+                    formElements[i].classList.add('error');\r\n+                } else {\r\n+                    formElements[i].classList.remove('error');\r\n+                }\r\n+            }\r\n+            \r\n+            if (isValid) {\r\n+                // Show loading state\r\n+                const submitBtn = this.querySelector('button[type=\"submit\"]');\r\n+                const originalText = submitBtn.innerHTML;\r\n+                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\r\n+                submitBtn.disabled = true;\r\n+                \r\n+                // Simulate form submission (replace with actual form handling)\r\n+                setTimeout(() => {\r\n+                    // Show success message\r\n+                    showNotification('Message sent successfully!', 'success');\r\n+                    \r\n+                    // Reset form\r\n+                    this.reset();\r\n+                    \r\n+                    // Reset button\r\n+                    submitBtn.innerHTML = originalText;\r\n+                    submitBtn.disabled = false;\r\n+                }, 2000);\r\n+            } else {\r\n+                showNotification('Please fill in all required fields.', 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+    \r\n+    // Notification system\r\n+    function showNotification(message, type = 'info') {\r\n+        const notification = document.createElement('div');\r\n+        notification.className = `notification notification-${type}`;\r\n+        notification.style.cssText = `\r\n+            position: fixed;\r\n+            top: 20px;\r\n+            right: 20px;\r\n+            padding: 15px 20px;\r\n+            border-radius: 8px;\r\n+            color: white;\r\n+            font-weight: 500;\r\n+            z-index: 10001;\r\n+            transform: translateX(100%);\r\n+            transition: transform 0.3s ease;\r\n+            max-width: 300px;\r\n+        `;\r\n+        \r\n+        // Set colors based on type\r\n+        switch(type) {\r\n+            case 'success':\r\n+                notification.style.background = '#10b981';\r\n+                break;\r\n+            case 'error':\r\n+                notification.style.background = '#ef4444';\r\n+                break;\r\n+            default:\r\n+                notification.style.background = '#3b82f6';\r\n+        }\r\n+        \r\n+        notification.textContent = message;\r\n+        document.body.appendChild(notification);\r\n+        \r\n+        // Animate in\r\n+        setTimeout(() => {\r\n+            notification.style.transform = 'translateX(0)';\r\n+        }, 10);\r\n+        \r\n+        // Auto remove after 5 seconds\r\n+        setTimeout(() => {\r\n+            notification.style.transform = 'translateX(100%)';\r\n+            setTimeout(() => {\r\n+                if (document.body.contains(notification)) {\r\n+                    document.body.removeChild(notification);\r\n+                }\r\n+            }, 300);\r\n+        }, 5000);\r\n+    }\r\n+    \r\n+    // Smooth reveal animation for sections\r\n+    const sections = document.querySelectorAll('section');\r\n+    const sectionObserver = new IntersectionObserver((entries) => {\r\n+        entries.forEach(entry => {\r\n+            if (entry.isIntersecting) {\r\n+                entry.target.classList.add('section-visible');\r\n+            }\r\n+        });\r\n+    }, { threshold: 0.1 });\r\n+    \r\n+    sections.forEach(section => {\r\n+        section.style.opacity = '0';\r\n+        section.style.transform = 'translateY(30px)';\r\n+        section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\r\n+        sectionObserver.observe(section);\r\n+    });\r\n+    \r\n+    // Add section visibility class\r\n+    document.addEventListener('scroll', function() {\r\n+        sections.forEach(section => {\r\n+            if (section.classList.contains('section-visible')) {\r\n+                section.style.opacity = '1';\r\n+                section.style.transform = 'translateY(0)';\r\n+            }\r\n+        });\r\n+    });\r\n+    \r\n+    // Parallax effect for hero section\r\n+    const hero = document.querySelector('.hero');\r\n+    if (hero) {\r\n+        window.addEventListener('scroll', function() {\r\n+            const scrolled = window.pageYOffset;\r\n+            const rate = scrolled * -0.5;\r\n+            hero.style.transform = `translateY(${rate}px)`;\r\n+        });\r\n+    }\r\n+    \r\n+    // Add floating animation to hero image\r\n+    const heroImage = document.querySelector('.image-container');\r\n+    if (heroImage) {\r\n+        heroImage.style.animation = 'float 6s ease-in-out infinite';\r\n+    }\r\n+    \r\n+    // Add CSS for float animation if not exists\r\n+    if (!document.querySelector('#float-animation')) {\r\n+        const style = document.createElement('style');\r\n+        style.id = 'float-animation';\r\n+        style.textContent = `\r\n+            @keyframes float {\r\n+                0%, 100% { transform: translateY(0px); }\r\n+                50% { transform: translateY(-20px); }\r\n+            }\r\n+        `;\r\n+        document.head.appendChild(style);\r\n+    }\r\n+    \r\n+    // Initialize particles effect (if particles.js is loaded)\r\n+    if (typeof particlesJS !== 'undefined' && document.getElementById('particles-js')) {\r\n+        particlesJS('particles-js', {\r\n+            particles: {\r\n+                number: { value: 80, density: { enable: true, value_area: 800 } },\r\n+                color: { value: \"#6366f1\" },\r\n+                shape: { type: \"circle\" },\r\n+                opacity: { value: 0.5, random: false },\r\n+                size: { value: 3, random: true },\r\n+                line_linked: {\r\n+                    enable: true,\r\n+                    distance: 150,\r\n+                    color: \"#6366f1\",\r\n+                    opacity: 0.4,\r\n+                    width: 1\r\n+                },\r\n+                move: {\r\n+                    enable: true,\r\n+                    speed: 6,\r\n+                    direction: \"none\",\r\n+                    random: false,\r\n+                    straight: false,\r\n+                    out_mode: \"out\",\r\n+                    bounce: false\r\n+                }\r\n+            },\r\n+            interactivity: {\r\n+                detect_on: \"canvas\",\r\n+                events: {\r\n+                    onhover: { enable: true, mode: \"repulse\" },\r\n+                    onclick: { enable: true, mode: \"push\" },\r\n+                    resize: true\r\n+                }\r\n+            },\r\n+            retina_detect: true\r\n+        });\r\n+    }\r\n+    \r\n+    // Add scroll progress indicator\r\n+    const progressBar = document.createElement('div');\r\n+    progressBar.style.cssText = `\r\n+        position: fixed;\r\n+        top: 0;\r\n+        left: 0;\r\n+        width: 0%;\r\n+        height: 3px;\r\n+        background: linear-gradient(90deg, #6366f1, #06b6d4);\r\n+        z-index: 10000;\r\n+        transition: width 0.1s ease;\r\n+    `;\r\n+    document.body.appendChild(progressBar);\r\n+    \r\n+    window.addEventListener('scroll', function() {\r\n+        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\r\n+        progressBar.style.width = scrolled + '%';\r\n+    });\r\n+    \r\n+    // Add hover effects to project cards\r\n+    projectCards.forEach(card => {\r\n+        card.addEventListener('mouseenter', function() {\r\n+            this.style.transform = 'translateY(-10px) scale(1.02)';\r\n+        });\r\n+        \r\n+        card.addEventListener('mouseleave', function() {\r\n+            this.style.transform = 'translateY(0) scale(1)';\r\n+        });\r\n+    });\r\n+    \r\n+    // Add typing effect to hero text\r\n+    function typeWriter(element, text, speed = 100) {\r\n+        let i = 0;\r\n+        element.innerHTML = '';\r\n+        \r\n+        function type() {\r\n+            if (i < text.length) {\r\n+                element.innerHTML += text.charAt(i);\r\n+                i++;\r\n+                setTimeout(type, speed);\r\n+            }\r\n+        }\r\n+        \r\n+        type();\r\n+    }\r\n+    \r\n+    // Initialize typing effect for hero title\r\n+    const heroTitle = document.querySelector('.title .txt-rotate');\r\n+    if (heroTitle && heroTitle.textContent) {\r\n+        const originalText = heroTitle.textContent;\r\n+        setTimeout(() => {\r\n+            typeWriter(heroTitle, originalText, 50);\r\n+        }, 1000);\r\n+    }\r\n+    \r\n+    // Add scroll-triggered animations (separate set)\r\n+    const scrollAnimatedElements = document.querySelectorAll('.animate-on-scroll');\r\n+    const scrollObserver = new IntersectionObserver((entries) => {\r\n+        entries.forEach(entry => {\r\n+            if (entry.isIntersecting) {\r\n+                entry.target.classList.add('animated');\r\n+            }\r\n+        });\r\n+    }, { threshold: 0.1 });\r\n+    \r\n+    scrollAnimatedElements.forEach(el => {\r\n+        scrollObserver.observe(el);\r\n+    });\r\n+    \r\n+    // Performance optimization: Throttle scroll events\r\n+    let ticking = false;\r\n+    \r\n+    function updateOnScroll() {\r\n+        // Update scroll-based animations here\r\n+        ticking = false;\r\n+    }\r\n+    \r\n+    function requestTick() {\r\n+        if (!ticking) {\r\n+            requestAnimationFrame(updateOnScroll);\r\n+            ticking = true;\r\n+        }\r\n+    }\r\n+    \r\n+    window.addEventListener('scroll', requestTick);\r\n+    \r\n+    // Add keyboard navigation support\r\n+    document.addEventListener('keydown', function(e) {\r\n+        // Escape key closes any open modals/popups\r\n+        if (e.key === 'Escape') {\r\n+            const popup = document.querySelector('.image-popup-overlay');\r\n+            if (popup) {\r\n+                popup.click();\r\n+            }\r\n+        }\r\n+        \r\n+        // Tab key navigation enhancement\r\n+        if (e.key === 'Tab') {\r\n+            document.body.classList.add('keyboard-navigation');\r\n+        }\r\n+    });\r\n+    \r\n+    // Remove keyboard navigation class on mouse use\r\n+    document.addEventListener('mousedown', function() {\r\n+        document.body.classList.remove('keyboard-navigation');\r\n+    });\r\n+    \r\n+    // Add focus styles for keyboard navigation\r\n+    document.addEventListener('keydown', function(e) {\r\n+        if (e.key === 'Tab') {\r\n+            document.body.classList.add('keyboard-navigation');\r\n+        }\r\n+    });\r\n+    \r\n+    // Initialize tooltips for project actions\r\n+    const projectActions = document.querySelectorAll('.project-link, .project-code');\r\n+    projectActions.forEach(action => {\r\n+        const tooltip = document.createElement('div');\r\n+        tooltip.className = 'tooltip';\r\n+        tooltip.textContent = action.title || 'View Project';\r\n+        tooltip.style.cssText = `\r\n+            position: absolute;\r\n+            background: rgba(0, 0, 0, 0.8);\r\n+            color: white;\r\n+            padding: 5px 10px;\r\n+            border-radius: 4px;\r\n+            font-size: 12px;\r\n+            white-space: nowrap;\r\n+            opacity: 0;\r\n+            pointer-events: none;\r\n+            transition: opacity 0.3s ease;\r\n+            z-index: 1000;\r\n+        `;\r\n+        \r\n+        action.appendChild(tooltip);\r\n+        \r\n+        action.addEventListener('mouseenter', function() {\r\n+            tooltip.style.opacity = '1';\r\n+        });\r\n+        \r\n+        action.addEventListener('mouseleave', function() {\r\n+            tooltip.style.opacity = '0';\r\n+        });\r\n+    });\r\n+    \r\n+    // Add loading animation for images\r\n+    const images = document.querySelectorAll('img');\r\n+    images.forEach(img => {\r\n+        img.addEventListener('load', function() {\r\n+            this.style.opacity = '1';\r\n+        });\r\n+        \r\n+        img.style.opacity = '0';\r\n+        img.style.transition = 'opacity 0.3s ease';\r\n+    });\r\n+    \r\n+    // Initialize the page\r\n+    console.log('Portfolio initialized successfully! 🚀');\r\n+\r\n+    // Ensure header height does not overlap content (dynamic offset)\r\n+    function setHeaderOffset() {\r\n+        const headerEl = document.querySelector('header');\r\n+        if (!headerEl) return;\r\n+        const height = headerEl.offsetHeight;\r\n+        document.documentElement.style.setProperty('--header-offset', height + 'px');\r\n+    }\r\n+    setHeaderOffset();\r\n+    window.addEventListener('resize', setHeaderOffset);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755589361202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,42 +39,65 @@\n             }\r\n         });\r\n     });\r\n     \r\n-    // Project filtering\r\n+    // Project gallery: filtering + search + layout toggle\r\n     const filterButtons = document.querySelectorAll('.filter-btn');\r\n     const projectCards = document.querySelectorAll('.project-card');\r\n-    \r\n+    const searchInput = document.getElementById('projectSearch');\r\n+    const layoutButtons = document.querySelectorAll('.layout-btn');\r\n+    const projectGrid = document.getElementById('projectGrid');\r\n+\r\n+    function applyGalleryFilters() {\r\n+        const activeFilter = document.querySelector('.filter-btn.active')?.getAttribute('data-filter') || 'all';\r\n+        const query = (searchInput?.value || '').toLowerCase().trim();\r\n+\r\n+        projectCards.forEach((card, index) => {\r\n+            const category = card.getAttribute('data-category');\r\n+            const text = card.textContent.toLowerCase();\r\n+            const matchesFilter = activeFilter === 'all' || category === activeFilter;\r\n+            const matchesQuery = query === '' || text.includes(query);\r\n+\r\n+            if (matchesFilter && matchesQuery) {\r\n+                card.style.display = 'block';\r\n+                setTimeout(() => {\r\n+                    card.style.opacity = '1';\r\n+                    card.style.transform = 'translateY(0)';\r\n+                }, index * 60);\r\n+            } else {\r\n+                card.style.opacity = '0';\r\n+                card.style.transform = 'translateY(20px)';\r\n+                setTimeout(() => { card.style.display = 'none'; }, 250);\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n     if (filterButtons.length > 0) {\r\n         filterButtons.forEach(button => {\r\n             button.addEventListener('click', function() {\r\n-                // Remove active class from all buttons\r\n                 filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                \r\n-                // Add active class to clicked button\r\n                 this.classList.add('active');\r\n-                \r\n-                const filter = this.getAttribute('data-filter');\r\n-                \r\n-                // Animate project cards\r\n-                projectCards.forEach((card, index) => {\r\n-                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\r\n-                        card.style.display = 'block';\r\n-                        setTimeout(() => {\r\n-                            card.style.opacity = '1';\r\n-                            card.style.transform = 'translateY(0)';\r\n-                        }, index * 100);\r\n-                    } else {\r\n-                        card.style.opacity = '0';\r\n-                        card.style.transform = 'translateY(20px)';\r\n-                        setTimeout(() => {\r\n-                        card.style.display = 'none';\r\n-                        }, 300);\r\n-                    }\r\n-                });\r\n+                applyGalleryFilters();\r\n             });\r\n         });\r\n     }\r\n+\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', () => {\r\n+            applyGalleryFilters();\r\n+        });\r\n+    }\r\n+\r\n+    if (layoutButtons.length > 0 && projectGrid) {\r\n+        layoutButtons.forEach(btn => {\r\n+            btn.addEventListener('click', function() {\r\n+                layoutButtons.forEach(b => b.classList.remove('active'));\r\n+                this.classList.add('active');\r\n+                const layout = this.getAttribute('data-layout');\r\n+                projectGrid.classList.toggle('compact', layout === 'compact');\r\n+            });\r\n+        });\r\n+    }\r\n     \r\n     // Animated Text Rotation\r\n     function TxtRotate(el, toRotate, period) {\r\n         this.toRotate = toRotate;\r\n"
                },
                {
                    "date": 1755589596916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -684,17 +684,21 @@\n             tooltip.style.opacity = '0';\r\n         });\r\n     });\r\n     \r\n-    // Add loading animation for images\r\n+    // Add loading animation for images and ensure already-cached images are visible\r\n     const images = document.querySelectorAll('img');\r\n     images.forEach(img => {\r\n-        img.addEventListener('load', function() {\r\n-            this.style.opacity = '1';\r\n-        });\r\n-        \r\n+        const reveal = () => { img.style.opacity = '1'; };\r\n         img.style.opacity = '0';\r\n         img.style.transition = 'opacity 0.3s ease';\r\n+        if (img.complete && img.naturalWidth > 0) {\r\n+            // Image already loaded from cache\r\n+            requestAnimationFrame(reveal);\r\n+        } else {\r\n+            img.addEventListener('load', reveal, { once: true });\r\n+            img.addEventListener('error', () => { img.style.opacity = '1'; }, { once: true });\r\n+        }\r\n     });\r\n     \r\n     // Initialize the page\r\n     console.log('Portfolio initialized successfully! 🚀');\r\n"
                },
                {
                    "date": 1755591794758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,106 @@\n             }\r\n         });\r\n     }\r\n     \r\n+    // Magnetic hover for buttons\r\n+    const magneticButtons = document.querySelectorAll('.btn');\r\n+    magneticButtons.forEach(btn => {\r\n+        const strength = 18;\r\n+        btn.addEventListener('mousemove', (e) => {\r\n+            const rect = btn.getBoundingClientRect();\r\n+            const x = e.clientX - rect.left - rect.width / 2;\r\n+            const y = e.clientY - rect.top - rect.height / 2;\r\n+            btn.style.transform = `translate(${x/strength}px, ${y/strength}px)`;\r\n+        });\r\n+        btn.addEventListener('mouseleave', () => {\r\n+            btn.style.transform = 'translate(0,0)';\r\n+        });\r\n+    });\r\n+\r\n+    // Ripple effect on buttons\r\n+    function addRipple(e) {\r\n+        const target = e.currentTarget;\r\n+        const circle = document.createElement('span');\r\n+        const size = Math.max(target.clientWidth, target.clientHeight);\r\n+        const rect = target.getBoundingClientRect();\r\n+        circle.className = 'ripple';\r\n+        circle.style.width = circle.style.height = size + 'px';\r\n+        circle.style.left = (e.clientX - rect.left - size/2) + 'px';\r\n+        circle.style.top = (e.clientY - rect.top - size/2) + 'px';\r\n+        target.appendChild(circle);\r\n+        setTimeout(() => circle.remove(), 650);\r\n+    }\r\n+\r\n+    document.querySelectorAll('.btn').forEach(btn => {\r\n+        btn.addEventListener('click', addRipple);\r\n+    });\r\n+\r\n+    // 3D tilt for project cards\r\n+    const tiltCards = document.querySelectorAll('.project-card');\r\n+    tiltCards.forEach(card => {\r\n+        const rotate = (e) => {\r\n+            const rect = card.getBoundingClientRect();\r\n+            const x = e.clientX - rect.left;\r\n+            const y = e.clientY - rect.top;\r\n+            const centerX = rect.width / 2;\r\n+            const centerY = rect.height / 2;\r\n+            const rotateX = (y - centerY) / 30;\r\n+            const rotateY = (centerX - x) / 30;\r\n+            card.style.transform = `perspective(800px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\r\n+        };\r\n+        card.addEventListener('mousemove', rotate);\r\n+        card.addEventListener('mouseleave', () => {\r\n+            card.style.transform = 'perspective(800px) rotateX(0) rotateY(0)';\r\n+        });\r\n+    });\r\n+\r\n+    // Reveal images on scroll using IntersectionObserver\r\n+    const grid = document.getElementById('projectGrid');\r\n+    if (grid) {\r\n+        grid.classList.add('reveal-ready');\r\n+        const observer = new IntersectionObserver((entries) => {\r\n+            entries.forEach(entry => {\r\n+                if (entry.isIntersecting) {\r\n+                    entry.target.classList.add('reveal-in');\r\n+                    observer.unobserve(entry.target);\r\n+                }\r\n+            })\r\n+        }, { threshold: 0.25 });\r\n+        document.querySelectorAll('.project-card').forEach(card => observer.observe(card));\r\n+    }\r\n+\r\n+    // Animated counters for stats\r\n+    const counters = document.querySelectorAll('.stat-number');\r\n+    const counterObserver = new IntersectionObserver((entries) => {\r\n+        entries.forEach(entry => {\r\n+            if (!entry.isIntersecting) return;\r\n+            const el = entry.target;\r\n+            const target = parseInt(el.textContent);\r\n+            const duration = 1200;\r\n+            const startTime = performance.now();\r\n+            function update(now) {\r\n+                const progress = Math.min((now - startTime) / duration, 1);\r\n+                const value = Math.floor(target * progress);\r\n+                el.textContent = value + (el.textContent.includes('+') ? '+' : '');\r\n+                if (progress < 1) requestAnimationFrame(update);\r\n+            }\r\n+            requestAnimationFrame(update);\r\n+            counterObserver.unobserve(el);\r\n+        });\r\n+    }, { threshold: 0.6 });\r\n+    counters.forEach(c => counterObserver.observe(c));\r\n+\r\n+    // Subtle parallax for aurora blobs\r\n+    const auroras = document.querySelectorAll('.aurora-1, .aurora-2, .aurora-3, .aurora-4');\r\n+    window.addEventListener('mousemove', (e) => {\r\n+        const x = (e.clientX / window.innerWidth - 0.5) * 10;\r\n+        const y = (e.clientY / window.innerHeight - 0.5) * 10;\r\n+        auroras.forEach((a, i) => {\r\n+            a.style.transform = `translate(${x * (i+1)}px, ${y * (i+1)}px)`;\r\n+        });\r\n+    });\r\n+\r\n     // Intersection Observer for animations\r\n     const observerOptions = {\r\n         threshold: 0.1,\r\n         rootMargin: '0px 0px -50px 0px'\r\n"
                },
                {
                    "date": 1755592066119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,17 +238,17 @@\n     // Reveal images on scroll using IntersectionObserver\r\n     const grid = document.getElementById('projectGrid');\r\n     if (grid) {\r\n         grid.classList.add('reveal-ready');\r\n-        const observer = new IntersectionObserver((entries) => {\r\n+        const cardObserver = new IntersectionObserver((entries) => {\r\n             entries.forEach(entry => {\r\n                 if (entry.isIntersecting) {\r\n                     entry.target.classList.add('reveal-in');\r\n-                    observer.unobserve(entry.target);\r\n+                    cardObserver.unobserve(entry.target);\r\n                 }\r\n             })\r\n         }, { threshold: 0.25 });\r\n-        document.querySelectorAll('.project-card').forEach(card => observer.observe(card));\r\n+        document.querySelectorAll('.project-card').forEach(card => cardObserver.observe(card));\r\n     }\r\n \r\n     // Animated counters for stats\r\n     const counters = document.querySelectorAll('.stat-number');\r\n@@ -280,8 +280,28 @@\n             a.style.transform = `translate(${x * (i+1)}px, ${y * (i+1)}px)`;\r\n         });\r\n     });\r\n \r\n+    // Stagger reveal of skill items when skill-category is in view\r\n+    const skillCategories = document.querySelectorAll('.skill-category');\r\n+    const listRevealObserver = new IntersectionObserver((entries) => {\r\n+        entries.forEach(entry => {\r\n+            if (!entry.isIntersecting) return;\r\n+            entry.target.classList.add('skills-revealed');\r\n+            listRevealObserver.unobserve(entry.target);\r\n+        });\r\n+    }, { threshold: 0.3 });\r\n+    skillCategories.forEach(cat => listRevealObserver.observe(cat));\r\n+\r\n+    // Global cursor-following glow\r\n+    const glow = document.createElement('div');\r\n+    glow.className = 'cursor-glow';\r\n+    document.body.appendChild(glow);\r\n+    window.addEventListener('mousemove', (e) => {\r\n+        glow.style.left = e.clientX + 'px';\r\n+        glow.style.top = e.clientY + 'px';\r\n+    });\r\n+\r\n     // Intersection Observer for animations\r\n     const observerOptions = {\r\n         threshold: 0.1,\r\n         rootMargin: '0px 0px -50px 0px'\r\n"
                }
            ],
            "date": 1755247233087,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', function() {\r\n    // Initialize theme\r\n    initTheme();\r\n    \r\n    // Mobile Navigation\r\n    const hamburger = document.querySelector('.hamburger');\r\n    const navLinks = document.querySelector('.nav-links');\r\n    \r\n    if (hamburger) {\r\n        hamburger.addEventListener('click', function() {\r\n            this.classList.toggle('active');\r\n            navLinks.classList.toggle('active');\r\n        });\r\n    }\r\n    \r\n    // Close mobile nav when clicking on a link\r\n    const navItems = document.querySelectorAll('.nav-links a');\r\n    navItems.forEach(item => {\r\n        item.addEventListener('click', function() {\r\n            if (hamburger && hamburger.classList.contains('active')) {\r\n                hamburger.classList.remove('active');\r\n                navLinks.classList.remove('active');\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Smooth scrolling for anchor links\r\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n        anchor.addEventListener('click', function(e) {\r\n            e.preventDefault();\r\n            const target = document.querySelector(this.getAttribute('href'));\r\n            \r\n            if (target) {\r\n                const headerHeight = document.querySelector('header').offsetHeight;\r\n                window.scrollTo({\r\n                    top: target.offsetTop - headerHeight - 20,\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Project filtering\r\n    const filterButtons = document.querySelectorAll('.filter-btn');\r\n    const projectCards = document.querySelectorAll('.project-card');\r\n    \r\n    if (filterButtons.length > 0) {\r\n        filterButtons.forEach(button => {\r\n            button.addEventListener('click', function() {\r\n                // Remove active class from all buttons\r\n                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n                \r\n                // Add active class to clicked button\r\n                this.classList.add('active');\r\n                \r\n                const filter = this.getAttribute('data-filter');\r\n                \r\n                // Animate project cards\r\n                projectCards.forEach((card, index) => {\r\n                    if (filter === 'all' || card.getAttribute('data-category') === filter) {\r\n                        card.style.display = 'block';\r\n                        setTimeout(() => {\r\n                            card.style.opacity = '1';\r\n                            card.style.transform = 'translateY(0)';\r\n                        }, index * 100);\r\n                    } else {\r\n                        card.style.opacity = '0';\r\n                        card.style.transform = 'translateY(20px)';\r\n                        setTimeout(() => {\r\n                            card.style.display = 'none';\r\n                        }, 300);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    // Animated Text Rotation\r\n    function TxtRotate(el, toRotate, period) {\r\n        this.toRotate = toRotate;\r\n        this.el = el;\r\n        this.loopNum = 0;\r\n        this.period = parseInt(period, 10) || 2000;\r\n        this.txt = '';\r\n        this.tick();\r\n        this.isDeleting = false;\r\n    }\r\n    \r\n    TxtRotate.prototype.tick = function() {\r\n        const i = this.loopNum % this.toRotate.length;\r\n        const fullTxt = this.toRotate[i];\r\n        \r\n        if (this.isDeleting) {\r\n            this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n        } else {\r\n            this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n        }\r\n        \r\n        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\r\n        \r\n        const that = this;\r\n        let delta = 200 - Math.random() * 100;\r\n        \r\n        if (this.isDeleting) { delta /= 2; }\r\n        \r\n        if (!this.isDeleting && this.txt === fullTxt) {\r\n            delta = this.period;\r\n            this.isDeleting = true;\r\n        } else if (this.isDeleting && this.txt === '') {\r\n            this.isDeleting = false;\r\n            this.loopNum++;\r\n            delta = 500;\r\n        }\r\n        \r\n        setTimeout(function() {\r\n            that.tick();\r\n        }, delta);\r\n    };\r\n    \r\n    // Start text rotation\r\n    const elements = document.getElementsByClassName('txt-rotate');\r\n    for (let i = 0; i < elements.length; i++) {\r\n        const toRotate = elements[i].getAttribute('data-rotate');\r\n        const period = elements[i].getAttribute('data-period');\r\n        if (toRotate) {\r\n            new TxtRotate(elements[i], JSON.parse(toRotate), period);\r\n        }\r\n    }\r\n    \r\n    // Theme toggle functionality\r\n    function initTheme() {\r\n        const themeToggle = document.getElementById('checkbox');\r\n        const currentTheme = localStorage.getItem('theme') || 'light';\r\n        \r\n        // Set initial theme\r\n        document.documentElement.setAttribute('data-theme', currentTheme);\r\n        themeToggle.checked = currentTheme === 'dark';\r\n        \r\n        // Theme toggle event\r\n        themeToggle.addEventListener('change', function() {\r\n            const newTheme = this.checked ? 'dark' : 'light';\r\n            document.documentElement.setAttribute('data-theme', newTheme);\r\n            localStorage.setItem('theme', newTheme);\r\n            \r\n            // Add transition effect\r\n            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\r\n        });\r\n    }\r\n    \r\n    // Navbar scroll effect\r\n    const header = document.querySelector('header');\r\n    \r\n    if (header) {\r\n        window.addEventListener('scroll', function() {\r\n            if (window.scrollY > 100) {\r\n                header.classList.add('scrolled');\r\n            } else {\r\n                header.classList.remove('scrolled');\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Intersection Observer for animations\r\n    const observerOptions = {\r\n        threshold: 0.1,\r\n        rootMargin: '0px 0px -50px 0px'\r\n    };\r\n    \r\n    // Animate elements on scroll\r\n    const animateOnScroll = new IntersectionObserver(function(entries, observer) {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('animate-in');\r\n                observer.unobserve(entry.target);\r\n            }\r\n        });\r\n    }, observerOptions);\r\n    \r\n    // Observe elements for animation\r\n    const animatedElements = document.querySelectorAll('.project-card, .skill-category, .timeline-item');\r\n    animatedElements.forEach(el => {\r\n        el.style.opacity = '0';\r\n        el.style.transform = 'translateY(30px)';\r\n        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\r\n        animateOnScroll.observe(el);\r\n    });\r\n    \r\n    // Add animation class\r\n    document.addEventListener('scroll', function() {\r\n        animatedElements.forEach(el => {\r\n            if (el.classList.contains('animate-in')) {\r\n                el.style.opacity = '1';\r\n                el.style.transform = 'translateY(0)';\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Animate skill bars on scroll\r\n    const skillSection = document.querySelector('.skills-progress');\r\n    \r\n    if (skillSection) {\r\n        const skillObserver = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    const skillBars = document.querySelectorAll('.skill-level');\r\n                    skillBars.forEach((bar, index) => {\r\n                        setTimeout(() => {\r\n                            const width = bar.getAttribute('data-level');\r\n                            bar.style.width = width;\r\n                        }, index * 200);\r\n                    });\r\n                    skillObserver.unobserve(entry.target);\r\n                }\r\n            });\r\n        }, { threshold: 0.5 });\r\n        \r\n        skillObserver.observe(skillSection);\r\n    }\r\n    \r\n    // Portfolio image popup functionality\r\n    const projectImages = document.querySelectorAll('.project-img img');\r\n    \r\n    projectImages.forEach(img => {\r\n        img.addEventListener('click', function() {\r\n            createImagePopup(this.src, this.alt);\r\n        });\r\n    });\r\n    \r\n    function createImagePopup(src, alt) {\r\n        const overlay = document.createElement('div');\r\n        overlay.className = 'image-popup-overlay';\r\n        overlay.style.cssText = `\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.9);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            z-index: 10000;\r\n            opacity: 0;\r\n            transition: opacity 0.3s ease;\r\n        `;\r\n        \r\n        const popupContent = document.createElement('div');\r\n        popupContent.style.cssText = `\r\n            position: relative;\r\n            max-width: 90%;\r\n            max-height: 90%;\r\n            transform: scale(0.8);\r\n            transition: transform 0.3s ease;\r\n        `;\r\n        \r\n        const popupImg = document.createElement('img');\r\n        popupImg.src = src;\r\n        popupImg.alt = alt;\r\n        popupImg.style.cssText = `\r\n            width: 100%;\r\n            height: auto;\r\n            border-radius: 8px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\r\n        `;\r\n        \r\n        const closeBtn = document.createElement('div');\r\n        closeBtn.innerHTML = '&times;';\r\n        closeBtn.style.cssText = `\r\n            position: absolute;\r\n            top: -40px;\r\n            right: 0;\r\n            width: 30px;\r\n            height: 30px;\r\n            background: rgba(255, 255, 255, 0.2);\r\n            color: white;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            font-size: 20px;\r\n            transition: background 0.3s ease;\r\n        `;\r\n        \r\n        closeBtn.addEventListener('mouseenter', function() {\r\n            this.style.background = 'rgba(255, 255, 255, 0.3)';\r\n        });\r\n        \r\n        closeBtn.addEventListener('mouseleave', function() {\r\n            this.style.background = 'rgba(255, 255, 255, 0.2)';\r\n        });\r\n        \r\n        popupContent.appendChild(popupImg);\r\n        popupContent.appendChild(closeBtn);\r\n        overlay.appendChild(popupContent);\r\n        document.body.appendChild(overlay);\r\n        \r\n        // Prevent scrolling when popup is open\r\n        document.body.style.overflow = 'hidden';\r\n        \r\n        // Animate in\r\n        setTimeout(() => {\r\n            overlay.style.opacity = '1';\r\n            popupContent.style.transform = 'scale(1)';\r\n        }, 10);\r\n        \r\n        // Close popup when clicking close button or overlay\r\n        closeBtn.addEventListener('click', closePopup);\r\n        overlay.addEventListener('click', function(e) {\r\n            if (e.target === overlay) {\r\n                closePopup();\r\n            }\r\n        });\r\n        \r\n        // Close on escape key\r\n        document.addEventListener('keydown', function(e) {\r\n            if (e.key === 'Escape') {\r\n                closePopup();\r\n            }\r\n        });\r\n        \r\n        function closePopup() {\r\n            overlay.style.opacity = '0';\r\n            popupContent.style.transform = 'scale(0.8)';\r\n            setTimeout(() => {\r\n                document.body.removeChild(overlay);\r\n                document.body.style.overflow = '';\r\n            }, 300);\r\n        }\r\n    }\r\n    \r\n    // Form submission with validation\r\n    const contactForm = document.getElementById('contactForm');\r\n    \r\n    if (contactForm) {\r\n        contactForm.addEventListener('submit', function(e) {\r\n            e.preventDefault();\r\n            \r\n            // Basic validation\r\n            let isValid = true;\r\n            const formElements = this.elements;\r\n            \r\n            for (let i = 0; i < formElements.length; i++) {\r\n                if (formElements[i].hasAttribute('required') && formElements[i].value.trim() === '') {\r\n                    isValid = false;\r\n                    formElements[i].classList.add('error');\r\n                } else {\r\n                    formElements[i].classList.remove('error');\r\n                }\r\n            }\r\n            \r\n            if (isValid) {\r\n                // Show loading state\r\n                const submitBtn = this.querySelector('button[type=\"submit\"]');\r\n                const originalText = submitBtn.innerHTML;\r\n                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\r\n                submitBtn.disabled = true;\r\n                \r\n                // Simulate form submission (replace with actual form handling)\r\n                setTimeout(() => {\r\n                    // Show success message\r\n                    showNotification('Message sent successfully!', 'success');\r\n                    \r\n                    // Reset form\r\n                    this.reset();\r\n                    \r\n                    // Reset button\r\n                    submitBtn.innerHTML = originalText;\r\n                    submitBtn.disabled = false;\r\n                }, 2000);\r\n            } else {\r\n                showNotification('Please fill in all required fields.', 'error');\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Notification system\r\n    function showNotification(message, type = 'info') {\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification notification-${type}`;\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            padding: 15px 20px;\r\n            border-radius: 8px;\r\n            color: white;\r\n            font-weight: 500;\r\n            z-index: 10001;\r\n            transform: translateX(100%);\r\n            transition: transform 0.3s ease;\r\n            max-width: 300px;\r\n        `;\r\n        \r\n        // Set colors based on type\r\n        switch(type) {\r\n            case 'success':\r\n                notification.style.background = '#10b981';\r\n                break;\r\n            case 'error':\r\n                notification.style.background = '#ef4444';\r\n                break;\r\n            default:\r\n                notification.style.background = '#3b82f6';\r\n        }\r\n        \r\n        notification.textContent = message;\r\n        document.body.appendChild(notification);\r\n        \r\n        // Animate in\r\n        setTimeout(() => {\r\n            notification.style.transform = 'translateX(0)';\r\n        }, 10);\r\n        \r\n        // Auto remove after 5 seconds\r\n        setTimeout(() => {\r\n            notification.style.transform = 'translateX(100%)';\r\n            setTimeout(() => {\r\n                if (document.body.contains(notification)) {\r\n                    document.body.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        }, 5000);\r\n    }\r\n    \r\n    // Smooth reveal animation for sections\r\n    const sections = document.querySelectorAll('section');\r\n    const sectionObserver = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('section-visible');\r\n            }\r\n        });\r\n    }, { threshold: 0.1 });\r\n    \r\n    sections.forEach(section => {\r\n        section.style.opacity = '0';\r\n        section.style.transform = 'translateY(30px)';\r\n        section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\r\n        sectionObserver.observe(section);\r\n    });\r\n    \r\n    // Add section visibility class\r\n    document.addEventListener('scroll', function() {\r\n        sections.forEach(section => {\r\n            if (section.classList.contains('section-visible')) {\r\n                section.style.opacity = '1';\r\n                section.style.transform = 'translateY(0)';\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Parallax effect for hero section\r\n    const hero = document.querySelector('.hero');\r\n    if (hero) {\r\n        window.addEventListener('scroll', function() {\r\n            const scrolled = window.pageYOffset;\r\n            const rate = scrolled * -0.5;\r\n            hero.style.transform = `translateY(${rate}px)`;\r\n        });\r\n    }\r\n    \r\n    // Add floating animation to hero image\r\n    const heroImage = document.querySelector('.image-container');\r\n    if (heroImage) {\r\n        heroImage.style.animation = 'float 6s ease-in-out infinite';\r\n    }\r\n    \r\n    // Add CSS for float animation if not exists\r\n    if (!document.querySelector('#float-animation')) {\r\n        const style = document.createElement('style');\r\n        style.id = 'float-animation';\r\n        style.textContent = `\r\n            @keyframes float {\r\n                0%, 100% { transform: translateY(0px); }\r\n                50% { transform: translateY(-20px); }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n    \r\n    // Initialize particles effect (if particles.js is loaded)\r\n    if (typeof particlesJS !== 'undefined' && document.getElementById('particles-js')) {\r\n        particlesJS('particles-js', {\r\n            particles: {\r\n                number: { value: 80, density: { enable: true, value_area: 800 } },\r\n                color: { value: \"#6366f1\" },\r\n                shape: { type: \"circle\" },\r\n                opacity: { value: 0.5, random: false },\r\n                size: { value: 3, random: true },\r\n                line_linked: {\r\n                    enable: true,\r\n                    distance: 150,\r\n                    color: \"#6366f1\",\r\n                    opacity: 0.4,\r\n                    width: 1\r\n                },\r\n                move: {\r\n                    enable: true,\r\n                    speed: 6,\r\n                    direction: \"none\",\r\n                    random: false,\r\n                    straight: false,\r\n                    out_mode: \"out\",\r\n                    bounce: false\r\n                }\r\n            },\r\n            interactivity: {\r\n                detect_on: \"canvas\",\r\n                events: {\r\n                    onhover: { enable: true, mode: \"repulse\" },\r\n                    onclick: { enable: true, mode: \"push\" },\r\n                    resize: true\r\n                }\r\n            },\r\n            retina_detect: true\r\n        });\r\n    }\r\n    \r\n    // Add scroll progress indicator\r\n    const progressBar = document.createElement('div');\r\n    progressBar.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 0%;\r\n        height: 3px;\r\n        background: linear-gradient(90deg, #6366f1, #06b6d4);\r\n        z-index: 10000;\r\n        transition: width 0.1s ease;\r\n    `;\r\n    document.body.appendChild(progressBar);\r\n    \r\n    window.addEventListener('scroll', function() {\r\n        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\r\n        progressBar.style.width = scrolled + '%';\r\n    });\r\n    \r\n    // Add hover effects to project cards\r\n    projectCards.forEach(card => {\r\n        card.addEventListener('mouseenter', function() {\r\n            this.style.transform = 'translateY(-10px) scale(1.02)';\r\n        });\r\n        \r\n        card.addEventListener('mouseleave', function() {\r\n            this.style.transform = 'translateY(0) scale(1)';\r\n        });\r\n    });\r\n    \r\n    // Add typing effect to hero text\r\n    function typeWriter(element, text, speed = 100) {\r\n        let i = 0;\r\n        element.innerHTML = '';\r\n        \r\n        function type() {\r\n            if (i < text.length) {\r\n                element.innerHTML += text.charAt(i);\r\n                i++;\r\n                setTimeout(type, speed);\r\n            }\r\n        }\r\n        \r\n        type();\r\n    }\r\n    \r\n    // Initialize typing effect for hero title\r\n    const heroTitle = document.querySelector('.title .txt-rotate');\r\n    if (heroTitle && heroTitle.textContent) {\r\n        const originalText = heroTitle.textContent;\r\n        setTimeout(() => {\r\n            typeWriter(heroTitle, originalText, 50);\r\n        }, 1000);\r\n    }\r\n    \r\n    // Add scroll-triggered animations\r\n    const animatedElements = document.querySelectorAll('.animate-on-scroll');\r\n    const scrollObserver = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('animated');\r\n            }\r\n        });\r\n    }, { threshold: 0.1 });\r\n    \r\n    animatedElements.forEach(el => {\r\n        scrollObserver.observe(el);\r\n    });\r\n    \r\n    // Performance optimization: Throttle scroll events\r\n    let ticking = false;\r\n    \r\n    function updateOnScroll() {\r\n        // Update scroll-based animations here\r\n        ticking = false;\r\n    }\r\n    \r\n    function requestTick() {\r\n        if (!ticking) {\r\n            requestAnimationFrame(updateOnScroll);\r\n            ticking = true;\r\n        }\r\n    }\r\n    \r\n    window.addEventListener('scroll', requestTick);\r\n    \r\n    // Add keyboard navigation support\r\n    document.addEventListener('keydown', function(e) {\r\n        // Escape key closes any open modals/popups\r\n        if (e.key === 'Escape') {\r\n            const popup = document.querySelector('.image-popup-overlay');\r\n            if (popup) {\r\n                popup.click();\r\n            }\r\n        }\r\n        \r\n        // Tab key navigation enhancement\r\n        if (e.key === 'Tab') {\r\n            document.body.classList.add('keyboard-navigation');\r\n        }\r\n    });\r\n    \r\n    // Remove keyboard navigation class on mouse use\r\n    document.addEventListener('mousedown', function() {\r\n        document.body.classList.remove('keyboard-navigation');\r\n    });\r\n    \r\n    // Add focus styles for keyboard navigation\r\n    document.addEventListener('keydown', function(e) {\r\n        if (e.key === 'Tab') {\r\n            document.body.classList.add('keyboard-navigation');\r\n        }\r\n    });\r\n    \r\n    // Initialize tooltips for project actions\r\n    const projectActions = document.querySelectorAll('.project-link, .project-code');\r\n    projectActions.forEach(action => {\r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'tooltip';\r\n        tooltip.textContent = action.title || 'View Project';\r\n        tooltip.style.cssText = `\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 5px 10px;\r\n            border-radius: 4px;\r\n            font-size: 12px;\r\n            white-space: nowrap;\r\n            opacity: 0;\r\n            pointer-events: none;\r\n            transition: opacity 0.3s ease;\r\n            z-index: 1000;\r\n        `;\r\n        \r\n        action.appendChild(tooltip);\r\n        \r\n        action.addEventListener('mouseenter', function() {\r\n            tooltip.style.opacity = '1';\r\n        });\r\n        \r\n        action.addEventListener('mouseleave', function() {\r\n            tooltip.style.opacity = '0';\r\n        });\r\n    });\r\n    \r\n    // Add loading animation for images\r\n    const images = document.querySelectorAll('img');\r\n    images.forEach(img => {\r\n        img.addEventListener('load', function() {\r\n            this.style.opacity = '1';\r\n        });\r\n        \r\n        img.style.opacity = '0';\r\n        img.style.transition = 'opacity 0.3s ease';\r\n    });\r\n    \r\n    // Initialize the page\r\n    console.log('Portfolio initialized successfully! 🚀');\r\n});"
        }
    ]
}